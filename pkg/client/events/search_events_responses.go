// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchEventsReader is a Reader for the SearchEvents structure.
type SearchEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewSearchEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchEventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchEventsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/k8s/v2/events/search] searchEvents", response, response.Code())
	}
}

// NewSearchEventsOK creates a SearchEventsOK with default headers values
func NewSearchEventsOK() *SearchEventsOK {
	return &SearchEventsOK{}
}

/*
SearchEventsOK describes a response with status code 200, with default header values.

SearchEventsOK search events o k
*/
type SearchEventsOK struct {
	Payload any
}

// IsSuccess returns true when this search events o k response has a 2xx status code
func (o *SearchEventsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search events o k response has a 3xx status code
func (o *SearchEventsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search events o k response has a 4xx status code
func (o *SearchEventsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search events o k response has a 5xx status code
func (o *SearchEventsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search events o k response a status code equal to that given
func (o *SearchEventsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the search events o k response
func (o *SearchEventsOK) Code() int {
	return 200
}

func (o *SearchEventsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/k8s/v2/events/search][%d] searchEventsOK %s", 200, payload)
}

func (o *SearchEventsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/k8s/v2/events/search][%d] searchEventsOK %s", 200, payload)
}

func (o *SearchEventsOK) GetPayload() any {
	return o.Payload
}

func (o *SearchEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewSearchEventsBadRequest creates a SearchEventsBadRequest with default headers values
func NewSearchEventsBadRequest() *SearchEventsBadRequest {
	return &SearchEventsBadRequest{}
}

/*
SearchEventsBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type SearchEventsBadRequest struct {
	Payload *SearchEventsBadRequestBody
}

// IsSuccess returns true when this search events bad request response has a 2xx status code
func (o *SearchEventsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search events bad request response has a 3xx status code
func (o *SearchEventsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search events bad request response has a 4xx status code
func (o *SearchEventsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search events bad request response has a 5xx status code
func (o *SearchEventsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search events bad request response a status code equal to that given
func (o *SearchEventsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the search events bad request response
func (o *SearchEventsBadRequest) Code() int {
	return 400
}

func (o *SearchEventsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/k8s/v2/events/search][%d] searchEventsBadRequest %s", 400, payload)
}

func (o *SearchEventsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/k8s/v2/events/search][%d] searchEventsBadRequest %s", 400, payload)
}

func (o *SearchEventsBadRequest) GetPayload() *SearchEventsBadRequestBody {
	return o.Payload
}

func (o *SearchEventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchEventsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewSearchEventsInternalServerError creates a SearchEventsInternalServerError with default headers values
func NewSearchEventsInternalServerError() *SearchEventsInternalServerError {
	return &SearchEventsInternalServerError{}
}

/*
SearchEventsInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type SearchEventsInternalServerError struct {
	Payload *SearchEventsInternalServerErrorBody
}

// IsSuccess returns true when this search events internal server error response has a 2xx status code
func (o *SearchEventsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search events internal server error response has a 3xx status code
func (o *SearchEventsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search events internal server error response has a 4xx status code
func (o *SearchEventsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search events internal server error response has a 5xx status code
func (o *SearchEventsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search events internal server error response a status code equal to that given
func (o *SearchEventsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the search events internal server error response
func (o *SearchEventsInternalServerError) Code() int {
	return 500
}

func (o *SearchEventsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/k8s/v2/events/search][%d] searchEventsInternalServerError %s", 500, payload)
}

func (o *SearchEventsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/k8s/v2/events/search][%d] searchEventsInternalServerError %s", 500, payload)
}

func (o *SearchEventsInternalServerError) GetPayload() *SearchEventsInternalServerErrorBody {
	return o.Payload
}

func (o *SearchEventsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchEventsInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
SearchEventsBadRequestBody search events bad request body
swagger:model SearchEventsBadRequestBody
*/
type SearchEventsBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this search events bad request body
func (o *SearchEventsBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search events bad request body based on context it is used
func (o *SearchEventsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchEventsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchEventsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SearchEventsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchEventsInternalServerErrorBody search events internal server error body
swagger:model SearchEventsInternalServerErrorBody
*/
type SearchEventsInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this search events internal server error body
func (o *SearchEventsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search events internal server error body based on context it is used
func (o *SearchEventsInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchEventsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchEventsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res SearchEventsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
