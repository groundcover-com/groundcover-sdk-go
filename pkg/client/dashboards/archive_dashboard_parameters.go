// Code generated by go-swagger; DO NOT EDIT.

package dashboards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewArchiveDashboardParams creates a new ArchiveDashboardParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewArchiveDashboardParams() *ArchiveDashboardParams {
	return &ArchiveDashboardParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewArchiveDashboardParamsWithTimeout creates a new ArchiveDashboardParams object
// with the ability to set a timeout on a request.
func NewArchiveDashboardParamsWithTimeout(timeout time.Duration) *ArchiveDashboardParams {
	return &ArchiveDashboardParams{
		timeout: timeout,
	}
}

// NewArchiveDashboardParamsWithContext creates a new ArchiveDashboardParams object
// with the ability to set a context for a request.
func NewArchiveDashboardParamsWithContext(ctx context.Context) *ArchiveDashboardParams {
	return &ArchiveDashboardParams{
		Context: ctx,
	}
}

// NewArchiveDashboardParamsWithHTTPClient creates a new ArchiveDashboardParams object
// with the ability to set a custom HTTPClient for a request.
func NewArchiveDashboardParamsWithHTTPClient(client *http.Client) *ArchiveDashboardParams {
	return &ArchiveDashboardParams{
		HTTPClient: client,
	}
}

/*
ArchiveDashboardParams contains all the parameters to send to the API endpoint

	for the archive dashboard operation.

	Typically these are written to a http.Request.
*/
type ArchiveDashboardParams struct {

	/* CurrentRevision.

	   Current revision number of the dashboard

	   Format: int32
	*/
	CurrentRevision int32

	/* ID.

	   UUID of the dashboard to archive
	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the archive dashboard params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ArchiveDashboardParams) WithDefaults() *ArchiveDashboardParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the archive dashboard params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ArchiveDashboardParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the archive dashboard params
func (o *ArchiveDashboardParams) WithTimeout(timeout time.Duration) *ArchiveDashboardParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the archive dashboard params
func (o *ArchiveDashboardParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the archive dashboard params
func (o *ArchiveDashboardParams) WithContext(ctx context.Context) *ArchiveDashboardParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the archive dashboard params
func (o *ArchiveDashboardParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the archive dashboard params
func (o *ArchiveDashboardParams) WithHTTPClient(client *http.Client) *ArchiveDashboardParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the archive dashboard params
func (o *ArchiveDashboardParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCurrentRevision adds the currentRevision to the archive dashboard params
func (o *ArchiveDashboardParams) WithCurrentRevision(currentRevision int32) *ArchiveDashboardParams {
	o.SetCurrentRevision(currentRevision)
	return o
}

// SetCurrentRevision adds the currentRevision to the archive dashboard params
func (o *ArchiveDashboardParams) SetCurrentRevision(currentRevision int32) {
	o.CurrentRevision = currentRevision
}

// WithID adds the id to the archive dashboard params
func (o *ArchiveDashboardParams) WithID(id string) *ArchiveDashboardParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the archive dashboard params
func (o *ArchiveDashboardParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *ArchiveDashboardParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param currentRevision
	qrCurrentRevision := o.CurrentRevision
	qCurrentRevision := swag.FormatInt32(qrCurrentRevision)
	if qCurrentRevision != "" {

		if err := r.SetQueryParam("currentRevision", qCurrentRevision); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
