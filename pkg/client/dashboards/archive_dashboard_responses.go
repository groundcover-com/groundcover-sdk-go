// Code generated by go-swagger; DO NOT EDIT.

package dashboards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/groundcover-com/groundcover-sdk-go/pkg/models"
)

// ArchiveDashboardReader is a Reader for the ArchiveDashboard structure.
type ArchiveDashboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ArchiveDashboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 202:
		result := NewArchiveDashboardAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewArchiveDashboardBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewArchiveDashboardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewArchiveDashboardInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/dashboards/{id}/archive] archiveDashboard", response, response.Code())
	}
}

// NewArchiveDashboardAccepted creates a ArchiveDashboardAccepted with default headers values
func NewArchiveDashboardAccepted() *ArchiveDashboardAccepted {
	return &ArchiveDashboardAccepted{}
}

/*
ArchiveDashboardAccepted describes a response with status code 202, with default header values.

ArchiveDashboardResponseWrapper defines the response structure for archiving a dashboard.
*/
type ArchiveDashboardAccepted struct {
	Payload *models.View
}

// IsSuccess returns true when this archive dashboard accepted response has a 2xx status code
func (o *ArchiveDashboardAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this archive dashboard accepted response has a 3xx status code
func (o *ArchiveDashboardAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this archive dashboard accepted response has a 4xx status code
func (o *ArchiveDashboardAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this archive dashboard accepted response has a 5xx status code
func (o *ArchiveDashboardAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this archive dashboard accepted response a status code equal to that given
func (o *ArchiveDashboardAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the archive dashboard accepted response
func (o *ArchiveDashboardAccepted) Code() int {
	return 202
}

func (o *ArchiveDashboardAccepted) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/dashboards/{id}/archive][%d] archiveDashboardAccepted %s", 202, payload)
}

func (o *ArchiveDashboardAccepted) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/dashboards/{id}/archive][%d] archiveDashboardAccepted %s", 202, payload)
}

func (o *ArchiveDashboardAccepted) GetPayload() *models.View {
	return o.Payload
}

func (o *ArchiveDashboardAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.View)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewArchiveDashboardBadRequest creates a ArchiveDashboardBadRequest with default headers values
func NewArchiveDashboardBadRequest() *ArchiveDashboardBadRequest {
	return &ArchiveDashboardBadRequest{}
}

/*
ArchiveDashboardBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type ArchiveDashboardBadRequest struct {
	Payload *ArchiveDashboardBadRequestBody
}

// IsSuccess returns true when this archive dashboard bad request response has a 2xx status code
func (o *ArchiveDashboardBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this archive dashboard bad request response has a 3xx status code
func (o *ArchiveDashboardBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this archive dashboard bad request response has a 4xx status code
func (o *ArchiveDashboardBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this archive dashboard bad request response has a 5xx status code
func (o *ArchiveDashboardBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this archive dashboard bad request response a status code equal to that given
func (o *ArchiveDashboardBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the archive dashboard bad request response
func (o *ArchiveDashboardBadRequest) Code() int {
	return 400
}

func (o *ArchiveDashboardBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/dashboards/{id}/archive][%d] archiveDashboardBadRequest %s", 400, payload)
}

func (o *ArchiveDashboardBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/dashboards/{id}/archive][%d] archiveDashboardBadRequest %s", 400, payload)
}

func (o *ArchiveDashboardBadRequest) GetPayload() *ArchiveDashboardBadRequestBody {
	return o.Payload
}

func (o *ArchiveDashboardBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ArchiveDashboardBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewArchiveDashboardNotFound creates a ArchiveDashboardNotFound with default headers values
func NewArchiveDashboardNotFound() *ArchiveDashboardNotFound {
	return &ArchiveDashboardNotFound{}
}

/*
ArchiveDashboardNotFound describes a response with status code 404, with default header values.

ErrorResponse defines a common error response structure.
*/
type ArchiveDashboardNotFound struct {
	Payload *ArchiveDashboardNotFoundBody
}

// IsSuccess returns true when this archive dashboard not found response has a 2xx status code
func (o *ArchiveDashboardNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this archive dashboard not found response has a 3xx status code
func (o *ArchiveDashboardNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this archive dashboard not found response has a 4xx status code
func (o *ArchiveDashboardNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this archive dashboard not found response has a 5xx status code
func (o *ArchiveDashboardNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this archive dashboard not found response a status code equal to that given
func (o *ArchiveDashboardNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the archive dashboard not found response
func (o *ArchiveDashboardNotFound) Code() int {
	return 404
}

func (o *ArchiveDashboardNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/dashboards/{id}/archive][%d] archiveDashboardNotFound %s", 404, payload)
}

func (o *ArchiveDashboardNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/dashboards/{id}/archive][%d] archiveDashboardNotFound %s", 404, payload)
}

func (o *ArchiveDashboardNotFound) GetPayload() *ArchiveDashboardNotFoundBody {
	return o.Payload
}

func (o *ArchiveDashboardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ArchiveDashboardNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewArchiveDashboardInternalServerError creates a ArchiveDashboardInternalServerError with default headers values
func NewArchiveDashboardInternalServerError() *ArchiveDashboardInternalServerError {
	return &ArchiveDashboardInternalServerError{}
}

/*
ArchiveDashboardInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type ArchiveDashboardInternalServerError struct {
	Payload *ArchiveDashboardInternalServerErrorBody
}

// IsSuccess returns true when this archive dashboard internal server error response has a 2xx status code
func (o *ArchiveDashboardInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this archive dashboard internal server error response has a 3xx status code
func (o *ArchiveDashboardInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this archive dashboard internal server error response has a 4xx status code
func (o *ArchiveDashboardInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this archive dashboard internal server error response has a 5xx status code
func (o *ArchiveDashboardInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this archive dashboard internal server error response a status code equal to that given
func (o *ArchiveDashboardInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the archive dashboard internal server error response
func (o *ArchiveDashboardInternalServerError) Code() int {
	return 500
}

func (o *ArchiveDashboardInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/dashboards/{id}/archive][%d] archiveDashboardInternalServerError %s", 500, payload)
}

func (o *ArchiveDashboardInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/dashboards/{id}/archive][%d] archiveDashboardInternalServerError %s", 500, payload)
}

func (o *ArchiveDashboardInternalServerError) GetPayload() *ArchiveDashboardInternalServerErrorBody {
	return o.Payload
}

func (o *ArchiveDashboardInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ArchiveDashboardInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
ArchiveDashboardBadRequestBody archive dashboard bad request body
swagger:model ArchiveDashboardBadRequestBody
*/
type ArchiveDashboardBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this archive dashboard bad request body
func (o *ArchiveDashboardBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this archive dashboard bad request body based on context it is used
func (o *ArchiveDashboardBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ArchiveDashboardBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ArchiveDashboardBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ArchiveDashboardBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ArchiveDashboardInternalServerErrorBody archive dashboard internal server error body
swagger:model ArchiveDashboardInternalServerErrorBody
*/
type ArchiveDashboardInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this archive dashboard internal server error body
func (o *ArchiveDashboardInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this archive dashboard internal server error body based on context it is used
func (o *ArchiveDashboardInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ArchiveDashboardInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ArchiveDashboardInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ArchiveDashboardInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ArchiveDashboardNotFoundBody archive dashboard not found body
swagger:model ArchiveDashboardNotFoundBody
*/
type ArchiveDashboardNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this archive dashboard not found body
func (o *ArchiveDashboardNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this archive dashboard not found body based on context it is used
func (o *ArchiveDashboardNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ArchiveDashboardNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ArchiveDashboardNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ArchiveDashboardNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
