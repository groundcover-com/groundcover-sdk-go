// Code generated by go-swagger; DO NOT EDIT.

package dashboards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/groundcover-com/groundcover-sdk-go/pkg/models"
)

// UpdateDashboardReader is a Reader for the UpdateDashboard structure.
type UpdateDashboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDashboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 202:
		result := NewUpdateDashboardAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDashboardBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDashboardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDashboardInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/dashboards/{id}] updateDashboard", response, response.Code())
	}
}

// NewUpdateDashboardAccepted creates a UpdateDashboardAccepted with default headers values
func NewUpdateDashboardAccepted() *UpdateDashboardAccepted {
	return &UpdateDashboardAccepted{}
}

/*
UpdateDashboardAccepted describes a response with status code 202, with default header values.

UpdateDashboardResponseWrapper defines the response structure for updating a dashboard.
*/
type UpdateDashboardAccepted struct {
	Payload *models.View
}

// IsSuccess returns true when this update dashboard accepted response has a 2xx status code
func (o *UpdateDashboardAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update dashboard accepted response has a 3xx status code
func (o *UpdateDashboardAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update dashboard accepted response has a 4xx status code
func (o *UpdateDashboardAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update dashboard accepted response has a 5xx status code
func (o *UpdateDashboardAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update dashboard accepted response a status code equal to that given
func (o *UpdateDashboardAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the update dashboard accepted response
func (o *UpdateDashboardAccepted) Code() int {
	return 202
}

func (o *UpdateDashboardAccepted) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/dashboards/{id}][%d] updateDashboardAccepted %s", 202, payload)
}

func (o *UpdateDashboardAccepted) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/dashboards/{id}][%d] updateDashboardAccepted %s", 202, payload)
}

func (o *UpdateDashboardAccepted) GetPayload() *models.View {
	return o.Payload
}

func (o *UpdateDashboardAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.View)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateDashboardBadRequest creates a UpdateDashboardBadRequest with default headers values
func NewUpdateDashboardBadRequest() *UpdateDashboardBadRequest {
	return &UpdateDashboardBadRequest{}
}

/*
UpdateDashboardBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type UpdateDashboardBadRequest struct {
	Payload *UpdateDashboardBadRequestBody
}

// IsSuccess returns true when this update dashboard bad request response has a 2xx status code
func (o *UpdateDashboardBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update dashboard bad request response has a 3xx status code
func (o *UpdateDashboardBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update dashboard bad request response has a 4xx status code
func (o *UpdateDashboardBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update dashboard bad request response has a 5xx status code
func (o *UpdateDashboardBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update dashboard bad request response a status code equal to that given
func (o *UpdateDashboardBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update dashboard bad request response
func (o *UpdateDashboardBadRequest) Code() int {
	return 400
}

func (o *UpdateDashboardBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/dashboards/{id}][%d] updateDashboardBadRequest %s", 400, payload)
}

func (o *UpdateDashboardBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/dashboards/{id}][%d] updateDashboardBadRequest %s", 400, payload)
}

func (o *UpdateDashboardBadRequest) GetPayload() *UpdateDashboardBadRequestBody {
	return o.Payload
}

func (o *UpdateDashboardBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateDashboardBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateDashboardNotFound creates a UpdateDashboardNotFound with default headers values
func NewUpdateDashboardNotFound() *UpdateDashboardNotFound {
	return &UpdateDashboardNotFound{}
}

/*
UpdateDashboardNotFound describes a response with status code 404, with default header values.

ErrorResponse defines a common error response structure.
*/
type UpdateDashboardNotFound struct {
	Payload *UpdateDashboardNotFoundBody
}

// IsSuccess returns true when this update dashboard not found response has a 2xx status code
func (o *UpdateDashboardNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update dashboard not found response has a 3xx status code
func (o *UpdateDashboardNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update dashboard not found response has a 4xx status code
func (o *UpdateDashboardNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update dashboard not found response has a 5xx status code
func (o *UpdateDashboardNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update dashboard not found response a status code equal to that given
func (o *UpdateDashboardNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update dashboard not found response
func (o *UpdateDashboardNotFound) Code() int {
	return 404
}

func (o *UpdateDashboardNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/dashboards/{id}][%d] updateDashboardNotFound %s", 404, payload)
}

func (o *UpdateDashboardNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/dashboards/{id}][%d] updateDashboardNotFound %s", 404, payload)
}

func (o *UpdateDashboardNotFound) GetPayload() *UpdateDashboardNotFoundBody {
	return o.Payload
}

func (o *UpdateDashboardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateDashboardNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateDashboardInternalServerError creates a UpdateDashboardInternalServerError with default headers values
func NewUpdateDashboardInternalServerError() *UpdateDashboardInternalServerError {
	return &UpdateDashboardInternalServerError{}
}

/*
UpdateDashboardInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type UpdateDashboardInternalServerError struct {
	Payload *UpdateDashboardInternalServerErrorBody
}

// IsSuccess returns true when this update dashboard internal server error response has a 2xx status code
func (o *UpdateDashboardInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update dashboard internal server error response has a 3xx status code
func (o *UpdateDashboardInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update dashboard internal server error response has a 4xx status code
func (o *UpdateDashboardInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update dashboard internal server error response has a 5xx status code
func (o *UpdateDashboardInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update dashboard internal server error response a status code equal to that given
func (o *UpdateDashboardInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update dashboard internal server error response
func (o *UpdateDashboardInternalServerError) Code() int {
	return 500
}

func (o *UpdateDashboardInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/dashboards/{id}][%d] updateDashboardInternalServerError %s", 500, payload)
}

func (o *UpdateDashboardInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/dashboards/{id}][%d] updateDashboardInternalServerError %s", 500, payload)
}

func (o *UpdateDashboardInternalServerError) GetPayload() *UpdateDashboardInternalServerErrorBody {
	return o.Payload
}

func (o *UpdateDashboardInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateDashboardInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
UpdateDashboardBadRequestBody update dashboard bad request body
swagger:model UpdateDashboardBadRequestBody
*/
type UpdateDashboardBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update dashboard bad request body
func (o *UpdateDashboardBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update dashboard bad request body based on context it is used
func (o *UpdateDashboardBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDashboardBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDashboardBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateDashboardBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateDashboardInternalServerErrorBody update dashboard internal server error body
swagger:model UpdateDashboardInternalServerErrorBody
*/
type UpdateDashboardInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update dashboard internal server error body
func (o *UpdateDashboardInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update dashboard internal server error body based on context it is used
func (o *UpdateDashboardInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDashboardInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDashboardInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res UpdateDashboardInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateDashboardNotFoundBody update dashboard not found body
swagger:model UpdateDashboardNotFoundBody
*/
type UpdateDashboardNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update dashboard not found body
func (o *UpdateDashboardNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update dashboard not found body based on context it is used
func (o *UpdateDashboardNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDashboardNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDashboardNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateDashboardNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
