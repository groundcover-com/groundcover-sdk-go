// Code generated by go-swagger; DO NOT EDIT.

package logs_pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/groundcover-com/groundcover-sdk-go/pkg/models"
)

// UpdateConfigReader is a Reader for the UpdateConfig structure.
type UpdateConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateConfigServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/pipelines/logs/config] updateConfig", response, response.Code())
	}
}

// NewUpdateConfigOK creates a UpdateConfigOK with default headers values
func NewUpdateConfigOK() *UpdateConfigOK {
	return &UpdateConfigOK{}
}

/*
UpdateConfigOK describes a response with status code 200, with default header values.

logsPipelineConfigResponse contains a logs pipeline configuration entry
*/
type UpdateConfigOK struct {
	Payload *models.LogsPipelineConfig
}

// IsSuccess returns true when this update config o k response has a 2xx status code
func (o *UpdateConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update config o k response has a 3xx status code
func (o *UpdateConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update config o k response has a 4xx status code
func (o *UpdateConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update config o k response has a 5xx status code
func (o *UpdateConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update config o k response a status code equal to that given
func (o *UpdateConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update config o k response
func (o *UpdateConfigOK) Code() int {
	return 200
}

func (o *UpdateConfigOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/pipelines/logs/config][%d] updateConfigOK %s", 200, payload)
}

func (o *UpdateConfigOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/pipelines/logs/config][%d] updateConfigOK %s", 200, payload)
}

func (o *UpdateConfigOK) GetPayload() *models.LogsPipelineConfig {
	return o.Payload
}

func (o *UpdateConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogsPipelineConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateConfigBadRequest creates a UpdateConfigBadRequest with default headers values
func NewUpdateConfigBadRequest() *UpdateConfigBadRequest {
	return &UpdateConfigBadRequest{}
}

/*
UpdateConfigBadRequest describes a response with status code 400, with default header values.

logsPipelineErrorResponse is used for error responses
*/
type UpdateConfigBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update config bad request response has a 2xx status code
func (o *UpdateConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update config bad request response has a 3xx status code
func (o *UpdateConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update config bad request response has a 4xx status code
func (o *UpdateConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update config bad request response has a 5xx status code
func (o *UpdateConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update config bad request response a status code equal to that given
func (o *UpdateConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update config bad request response
func (o *UpdateConfigBadRequest) Code() int {
	return 400
}

func (o *UpdateConfigBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/pipelines/logs/config][%d] updateConfigBadRequest %s", 400, payload)
}

func (o *UpdateConfigBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/pipelines/logs/config][%d] updateConfigBadRequest %s", 400, payload)
}

func (o *UpdateConfigBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateConfigInternalServerError creates a UpdateConfigInternalServerError with default headers values
func NewUpdateConfigInternalServerError() *UpdateConfigInternalServerError {
	return &UpdateConfigInternalServerError{}
}

/*
UpdateConfigInternalServerError describes a response with status code 500, with default header values.

logsPipelineErrorResponse is used for error responses
*/
type UpdateConfigInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update config internal server error response has a 2xx status code
func (o *UpdateConfigInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update config internal server error response has a 3xx status code
func (o *UpdateConfigInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update config internal server error response has a 4xx status code
func (o *UpdateConfigInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update config internal server error response has a 5xx status code
func (o *UpdateConfigInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update config internal server error response a status code equal to that given
func (o *UpdateConfigInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update config internal server error response
func (o *UpdateConfigInternalServerError) Code() int {
	return 500
}

func (o *UpdateConfigInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/pipelines/logs/config][%d] updateConfigInternalServerError %s", 500, payload)
}

func (o *UpdateConfigInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/pipelines/logs/config][%d] updateConfigInternalServerError %s", 500, payload)
}

func (o *UpdateConfigInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateConfigServiceUnavailable creates a UpdateConfigServiceUnavailable with default headers values
func NewUpdateConfigServiceUnavailable() *UpdateConfigServiceUnavailable {
	return &UpdateConfigServiceUnavailable{}
}

/*
UpdateConfigServiceUnavailable describes a response with status code 503, with default header values.

logsPipelineErrorResponse is used for error responses
*/
type UpdateConfigServiceUnavailable struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this update config service unavailable response has a 2xx status code
func (o *UpdateConfigServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update config service unavailable response has a 3xx status code
func (o *UpdateConfigServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update config service unavailable response has a 4xx status code
func (o *UpdateConfigServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update config service unavailable response has a 5xx status code
func (o *UpdateConfigServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update config service unavailable response a status code equal to that given
func (o *UpdateConfigServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the update config service unavailable response
func (o *UpdateConfigServiceUnavailable) Code() int {
	return 503
}

func (o *UpdateConfigServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/pipelines/logs/config][%d] updateConfigServiceUnavailable %s", 503, payload)
}

func (o *UpdateConfigServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/pipelines/logs/config][%d] updateConfigServiceUnavailable %s", 503, payload)
}

func (o *UpdateConfigServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateConfigServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
