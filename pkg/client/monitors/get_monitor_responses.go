// Code generated by go-swagger; DO NOT EDIT.

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetMonitorReader is a Reader for the GetMonitor structure.
type GetMonitorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMonitorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMonitorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetMonitorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMonitorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetMonitorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/monitors/{id}] getMonitor", response, response.Code())
	}
}

// NewGetMonitorOK creates a GetMonitorOK with default headers values
func NewGetMonitorOK() *GetMonitorOK {
	return &GetMonitorOK{}
}

/*
GetMonitorOK describes a response with status code 200, with default header values.

MonitorYamlResponse defines the response structure for getting a monitor's YAML.
*/
type GetMonitorOK struct {
	Payload []uint8
}

// IsSuccess returns true when this get monitor o k response has a 2xx status code
func (o *GetMonitorOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get monitor o k response has a 3xx status code
func (o *GetMonitorOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get monitor o k response has a 4xx status code
func (o *GetMonitorOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get monitor o k response has a 5xx status code
func (o *GetMonitorOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get monitor o k response a status code equal to that given
func (o *GetMonitorOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get monitor o k response
func (o *GetMonitorOK) Code() int {
	return 200
}

func (o *GetMonitorOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/{id}][%d] getMonitorOK %s", 200, payload)
}

func (o *GetMonitorOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/{id}][%d] getMonitorOK %s", 200, payload)
}

func (o *GetMonitorOK) GetPayload() []uint8 {
	return o.Payload
}

func (o *GetMonitorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMonitorBadRequest creates a GetMonitorBadRequest with default headers values
func NewGetMonitorBadRequest() *GetMonitorBadRequest {
	return &GetMonitorBadRequest{}
}

/*
GetMonitorBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type GetMonitorBadRequest struct {
	Payload *GetMonitorBadRequestBody
}

// IsSuccess returns true when this get monitor bad request response has a 2xx status code
func (o *GetMonitorBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get monitor bad request response has a 3xx status code
func (o *GetMonitorBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get monitor bad request response has a 4xx status code
func (o *GetMonitorBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get monitor bad request response has a 5xx status code
func (o *GetMonitorBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get monitor bad request response a status code equal to that given
func (o *GetMonitorBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get monitor bad request response
func (o *GetMonitorBadRequest) Code() int {
	return 400
}

func (o *GetMonitorBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/{id}][%d] getMonitorBadRequest %s", 400, payload)
}

func (o *GetMonitorBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/{id}][%d] getMonitorBadRequest %s", 400, payload)
}

func (o *GetMonitorBadRequest) GetPayload() *GetMonitorBadRequestBody {
	return o.Payload
}

func (o *GetMonitorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetMonitorBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMonitorNotFound creates a GetMonitorNotFound with default headers values
func NewGetMonitorNotFound() *GetMonitorNotFound {
	return &GetMonitorNotFound{}
}

/*
GetMonitorNotFound describes a response with status code 404, with default header values.

ErrorResponse defines a common error response structure.
*/
type GetMonitorNotFound struct {
	Payload *GetMonitorNotFoundBody
}

// IsSuccess returns true when this get monitor not found response has a 2xx status code
func (o *GetMonitorNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get monitor not found response has a 3xx status code
func (o *GetMonitorNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get monitor not found response has a 4xx status code
func (o *GetMonitorNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get monitor not found response has a 5xx status code
func (o *GetMonitorNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get monitor not found response a status code equal to that given
func (o *GetMonitorNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get monitor not found response
func (o *GetMonitorNotFound) Code() int {
	return 404
}

func (o *GetMonitorNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/{id}][%d] getMonitorNotFound %s", 404, payload)
}

func (o *GetMonitorNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/{id}][%d] getMonitorNotFound %s", 404, payload)
}

func (o *GetMonitorNotFound) GetPayload() *GetMonitorNotFoundBody {
	return o.Payload
}

func (o *GetMonitorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetMonitorNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMonitorInternalServerError creates a GetMonitorInternalServerError with default headers values
func NewGetMonitorInternalServerError() *GetMonitorInternalServerError {
	return &GetMonitorInternalServerError{}
}

/*
GetMonitorInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type GetMonitorInternalServerError struct {
	Payload *GetMonitorInternalServerErrorBody
}

// IsSuccess returns true when this get monitor internal server error response has a 2xx status code
func (o *GetMonitorInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get monitor internal server error response has a 3xx status code
func (o *GetMonitorInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get monitor internal server error response has a 4xx status code
func (o *GetMonitorInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get monitor internal server error response has a 5xx status code
func (o *GetMonitorInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get monitor internal server error response a status code equal to that given
func (o *GetMonitorInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get monitor internal server error response
func (o *GetMonitorInternalServerError) Code() int {
	return 500
}

func (o *GetMonitorInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/{id}][%d] getMonitorInternalServerError %s", 500, payload)
}

func (o *GetMonitorInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/{id}][%d] getMonitorInternalServerError %s", 500, payload)
}

func (o *GetMonitorInternalServerError) GetPayload() *GetMonitorInternalServerErrorBody {
	return o.Payload
}

func (o *GetMonitorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetMonitorInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetMonitorBadRequestBody get monitor bad request body
swagger:model GetMonitorBadRequestBody
*/
type GetMonitorBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get monitor bad request body
func (o *GetMonitorBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get monitor bad request body based on context it is used
func (o *GetMonitorBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetMonitorBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMonitorBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetMonitorBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetMonitorInternalServerErrorBody get monitor internal server error body
swagger:model GetMonitorInternalServerErrorBody
*/
type GetMonitorInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get monitor internal server error body
func (o *GetMonitorInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get monitor internal server error body based on context it is used
func (o *GetMonitorInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetMonitorInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMonitorInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetMonitorInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetMonitorNotFoundBody get monitor not found body
swagger:model GetMonitorNotFoundBody
*/
type GetMonitorNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get monitor not found body
func (o *GetMonitorNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get monitor not found body based on context it is used
func (o *GetMonitorNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetMonitorNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMonitorNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetMonitorNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
