// Code generated by go-swagger; DO NOT EDIT.

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/groundcover-com/groundcover-sdk-go/pkg/models"
)

// UpdateSilenceReader is a Reader for the UpdateSilence structure.
type UpdateSilenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSilenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSilenceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSilenceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateSilenceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/monitors/silences/{id}] updateSilence", response, response.Code())
	}
}

// NewUpdateSilenceOK creates a UpdateSilenceOK with default headers values
func NewUpdateSilenceOK() *UpdateSilenceOK {
	return &UpdateSilenceOK{}
}

/*
UpdateSilenceOK describes a response with status code 200, with default header values.

UpdateSilenceOK update silence o k
*/
type UpdateSilenceOK struct {
	Payload *models.Silence
}

// IsSuccess returns true when this update silence o k response has a 2xx status code
func (o *UpdateSilenceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update silence o k response has a 3xx status code
func (o *UpdateSilenceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update silence o k response has a 4xx status code
func (o *UpdateSilenceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update silence o k response has a 5xx status code
func (o *UpdateSilenceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update silence o k response a status code equal to that given
func (o *UpdateSilenceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update silence o k response
func (o *UpdateSilenceOK) Code() int {
	return 200
}

func (o *UpdateSilenceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/monitors/silences/{id}][%d] updateSilenceOK %s", 200, payload)
}

func (o *UpdateSilenceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/monitors/silences/{id}][%d] updateSilenceOK %s", 200, payload)
}

func (o *UpdateSilenceOK) GetPayload() *models.Silence {
	return o.Payload
}

func (o *UpdateSilenceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Silence)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateSilenceBadRequest creates a UpdateSilenceBadRequest with default headers values
func NewUpdateSilenceBadRequest() *UpdateSilenceBadRequest {
	return &UpdateSilenceBadRequest{}
}

/*
UpdateSilenceBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type UpdateSilenceBadRequest struct {
	Payload *UpdateSilenceBadRequestBody
}

// IsSuccess returns true when this update silence bad request response has a 2xx status code
func (o *UpdateSilenceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update silence bad request response has a 3xx status code
func (o *UpdateSilenceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update silence bad request response has a 4xx status code
func (o *UpdateSilenceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update silence bad request response has a 5xx status code
func (o *UpdateSilenceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update silence bad request response a status code equal to that given
func (o *UpdateSilenceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update silence bad request response
func (o *UpdateSilenceBadRequest) Code() int {
	return 400
}

func (o *UpdateSilenceBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/monitors/silences/{id}][%d] updateSilenceBadRequest %s", 400, payload)
}

func (o *UpdateSilenceBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/monitors/silences/{id}][%d] updateSilenceBadRequest %s", 400, payload)
}

func (o *UpdateSilenceBadRequest) GetPayload() *UpdateSilenceBadRequestBody {
	return o.Payload
}

func (o *UpdateSilenceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateSilenceBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateSilenceInternalServerError creates a UpdateSilenceInternalServerError with default headers values
func NewUpdateSilenceInternalServerError() *UpdateSilenceInternalServerError {
	return &UpdateSilenceInternalServerError{}
}

/*
UpdateSilenceInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type UpdateSilenceInternalServerError struct {
	Payload *UpdateSilenceInternalServerErrorBody
}

// IsSuccess returns true when this update silence internal server error response has a 2xx status code
func (o *UpdateSilenceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update silence internal server error response has a 3xx status code
func (o *UpdateSilenceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update silence internal server error response has a 4xx status code
func (o *UpdateSilenceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update silence internal server error response has a 5xx status code
func (o *UpdateSilenceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update silence internal server error response a status code equal to that given
func (o *UpdateSilenceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update silence internal server error response
func (o *UpdateSilenceInternalServerError) Code() int {
	return 500
}

func (o *UpdateSilenceInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/monitors/silences/{id}][%d] updateSilenceInternalServerError %s", 500, payload)
}

func (o *UpdateSilenceInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/monitors/silences/{id}][%d] updateSilenceInternalServerError %s", 500, payload)
}

func (o *UpdateSilenceInternalServerError) GetPayload() *UpdateSilenceInternalServerErrorBody {
	return o.Payload
}

func (o *UpdateSilenceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateSilenceInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
UpdateSilenceBadRequestBody update silence bad request body
swagger:model UpdateSilenceBadRequestBody
*/
type UpdateSilenceBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update silence bad request body
func (o *UpdateSilenceBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update silence bad request body based on context it is used
func (o *UpdateSilenceBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSilenceBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSilenceBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateSilenceBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSilenceInternalServerErrorBody update silence internal server error body
swagger:model UpdateSilenceInternalServerErrorBody
*/
type UpdateSilenceInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update silence internal server error body
func (o *UpdateSilenceInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update silence internal server error body based on context it is used
func (o *UpdateSilenceInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSilenceInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSilenceInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res UpdateSilenceInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
