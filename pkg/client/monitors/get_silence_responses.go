// Code generated by go-swagger; DO NOT EDIT.

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/groundcover-com/groundcover-sdk-go/pkg/models"
)

// GetSilenceReader is a Reader for the GetSilence structure.
type GetSilenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSilenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetSilenceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSilenceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSilenceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSilenceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/monitors/silences/{id}] getSilence", response, response.Code())
	}
}

// NewGetSilenceOK creates a GetSilenceOK with default headers values
func NewGetSilenceOK() *GetSilenceOK {
	return &GetSilenceOK{}
}

/*
GetSilenceOK describes a response with status code 200, with default header values.

GetSilenceOK get silence o k
*/
type GetSilenceOK struct {
	Payload *models.Silence
}

// IsSuccess returns true when this get silence o k response has a 2xx status code
func (o *GetSilenceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get silence o k response has a 3xx status code
func (o *GetSilenceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get silence o k response has a 4xx status code
func (o *GetSilenceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get silence o k response has a 5xx status code
func (o *GetSilenceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get silence o k response a status code equal to that given
func (o *GetSilenceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get silence o k response
func (o *GetSilenceOK) Code() int {
	return 200
}

func (o *GetSilenceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/silences/{id}][%d] getSilenceOK %s", 200, payload)
}

func (o *GetSilenceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/silences/{id}][%d] getSilenceOK %s", 200, payload)
}

func (o *GetSilenceOK) GetPayload() *models.Silence {
	return o.Payload
}

func (o *GetSilenceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Silence)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetSilenceBadRequest creates a GetSilenceBadRequest with default headers values
func NewGetSilenceBadRequest() *GetSilenceBadRequest {
	return &GetSilenceBadRequest{}
}

/*
GetSilenceBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type GetSilenceBadRequest struct {
	Payload *GetSilenceBadRequestBody
}

// IsSuccess returns true when this get silence bad request response has a 2xx status code
func (o *GetSilenceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get silence bad request response has a 3xx status code
func (o *GetSilenceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get silence bad request response has a 4xx status code
func (o *GetSilenceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get silence bad request response has a 5xx status code
func (o *GetSilenceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get silence bad request response a status code equal to that given
func (o *GetSilenceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get silence bad request response
func (o *GetSilenceBadRequest) Code() int {
	return 400
}

func (o *GetSilenceBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/silences/{id}][%d] getSilenceBadRequest %s", 400, payload)
}

func (o *GetSilenceBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/silences/{id}][%d] getSilenceBadRequest %s", 400, payload)
}

func (o *GetSilenceBadRequest) GetPayload() *GetSilenceBadRequestBody {
	return o.Payload
}

func (o *GetSilenceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSilenceBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetSilenceNotFound creates a GetSilenceNotFound with default headers values
func NewGetSilenceNotFound() *GetSilenceNotFound {
	return &GetSilenceNotFound{}
}

/*
GetSilenceNotFound describes a response with status code 404, with default header values.

ErrorResponse defines a common error response structure.
*/
type GetSilenceNotFound struct {
	Payload *GetSilenceNotFoundBody
}

// IsSuccess returns true when this get silence not found response has a 2xx status code
func (o *GetSilenceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get silence not found response has a 3xx status code
func (o *GetSilenceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get silence not found response has a 4xx status code
func (o *GetSilenceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get silence not found response has a 5xx status code
func (o *GetSilenceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get silence not found response a status code equal to that given
func (o *GetSilenceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get silence not found response
func (o *GetSilenceNotFound) Code() int {
	return 404
}

func (o *GetSilenceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/silences/{id}][%d] getSilenceNotFound %s", 404, payload)
}

func (o *GetSilenceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/silences/{id}][%d] getSilenceNotFound %s", 404, payload)
}

func (o *GetSilenceNotFound) GetPayload() *GetSilenceNotFoundBody {
	return o.Payload
}

func (o *GetSilenceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSilenceNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetSilenceInternalServerError creates a GetSilenceInternalServerError with default headers values
func NewGetSilenceInternalServerError() *GetSilenceInternalServerError {
	return &GetSilenceInternalServerError{}
}

/*
GetSilenceInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type GetSilenceInternalServerError struct {
	Payload *GetSilenceInternalServerErrorBody
}

// IsSuccess returns true when this get silence internal server error response has a 2xx status code
func (o *GetSilenceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get silence internal server error response has a 3xx status code
func (o *GetSilenceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get silence internal server error response has a 4xx status code
func (o *GetSilenceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get silence internal server error response has a 5xx status code
func (o *GetSilenceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get silence internal server error response a status code equal to that given
func (o *GetSilenceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get silence internal server error response
func (o *GetSilenceInternalServerError) Code() int {
	return 500
}

func (o *GetSilenceInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/silences/{id}][%d] getSilenceInternalServerError %s", 500, payload)
}

func (o *GetSilenceInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/silences/{id}][%d] getSilenceInternalServerError %s", 500, payload)
}

func (o *GetSilenceInternalServerError) GetPayload() *GetSilenceInternalServerErrorBody {
	return o.Payload
}

func (o *GetSilenceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSilenceInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
GetSilenceBadRequestBody get silence bad request body
swagger:model GetSilenceBadRequestBody
*/
type GetSilenceBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get silence bad request body
func (o *GetSilenceBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get silence bad request body based on context it is used
func (o *GetSilenceBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSilenceBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSilenceBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetSilenceBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSilenceInternalServerErrorBody get silence internal server error body
swagger:model GetSilenceInternalServerErrorBody
*/
type GetSilenceInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get silence internal server error body
func (o *GetSilenceInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get silence internal server error body based on context it is used
func (o *GetSilenceInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSilenceInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSilenceInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetSilenceInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSilenceNotFoundBody get silence not found body
swagger:model GetSilenceNotFoundBody
*/
type GetSilenceNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get silence not found body
func (o *GetSilenceNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get silence not found body based on context it is used
func (o *GetSilenceNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSilenceNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSilenceNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetSilenceNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
