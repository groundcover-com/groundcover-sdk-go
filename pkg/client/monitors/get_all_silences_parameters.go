// Code generated by go-swagger; DO NOT EDIT.

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllSilencesParams creates a new GetAllSilencesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllSilencesParams() *GetAllSilencesParams {
	return &GetAllSilencesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllSilencesParamsWithTimeout creates a new GetAllSilencesParams object
// with the ability to set a timeout on a request.
func NewGetAllSilencesParamsWithTimeout(timeout time.Duration) *GetAllSilencesParams {
	return &GetAllSilencesParams{
		timeout: timeout,
	}
}

// NewGetAllSilencesParamsWithContext creates a new GetAllSilencesParams object
// with the ability to set a context for a request.
func NewGetAllSilencesParamsWithContext(ctx context.Context) *GetAllSilencesParams {
	return &GetAllSilencesParams{
		Context: ctx,
	}
}

// NewGetAllSilencesParamsWithHTTPClient creates a new GetAllSilencesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllSilencesParamsWithHTTPClient(client *http.Client) *GetAllSilencesParams {
	return &GetAllSilencesParams{
		HTTPClient: client,
	}
}

/*
GetAllSilencesParams contains all the parameters to send to the API endpoint

	for the get all silences operation.

	Typically these are written to a http.Request.
*/
type GetAllSilencesParams struct {

	/* Active.

	   Filter to show only active silences
	*/
	Active *bool

	/* Limit.

	   Maximum number of silences to return

	   Format: int64
	*/
	Limit *int64

	/* Skip.

	   Number of silences to skip

	   Format: int64
	*/
	Skip *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all silences params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllSilencesParams) WithDefaults() *GetAllSilencesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all silences params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllSilencesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get all silences params
func (o *GetAllSilencesParams) WithTimeout(timeout time.Duration) *GetAllSilencesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all silences params
func (o *GetAllSilencesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all silences params
func (o *GetAllSilencesParams) WithContext(ctx context.Context) *GetAllSilencesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all silences params
func (o *GetAllSilencesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all silences params
func (o *GetAllSilencesParams) WithHTTPClient(client *http.Client) *GetAllSilencesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all silences params
func (o *GetAllSilencesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActive adds the active to the get all silences params
func (o *GetAllSilencesParams) WithActive(active *bool) *GetAllSilencesParams {
	o.SetActive(active)
	return o
}

// SetActive adds the active to the get all silences params
func (o *GetAllSilencesParams) SetActive(active *bool) {
	o.Active = active
}

// WithLimit adds the limit to the get all silences params
func (o *GetAllSilencesParams) WithLimit(limit *int64) *GetAllSilencesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get all silences params
func (o *GetAllSilencesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithSkip adds the skip to the get all silences params
func (o *GetAllSilencesParams) WithSkip(skip *int64) *GetAllSilencesParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the get all silences params
func (o *GetAllSilencesParams) SetSkip(skip *int64) {
	o.Skip = skip
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllSilencesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Active != nil {

		// query param active
		var qrActive bool

		if o.Active != nil {
			qrActive = *o.Active
		}
		qActive := swag.FormatBool(qrActive)
		if qActive != "" {

			if err := r.SetQueryParam("active", qActive); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int64

		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt64(qrSkip)
		if qSkip != "" {

			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
