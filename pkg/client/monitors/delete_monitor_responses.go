// Code generated by go-swagger; DO NOT EDIT.

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeleteMonitorReader is a Reader for the DeleteMonitor structure.
type DeleteMonitorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteMonitorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteMonitorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteMonitorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteMonitorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteMonitorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /api/monitors/{id}] deleteMonitor", response, response.Code())
	}
}

// NewDeleteMonitorOK creates a DeleteMonitorOK with default headers values
func NewDeleteMonitorOK() *DeleteMonitorOK {
	return &DeleteMonitorOK{}
}

/*
DeleteMonitorOK describes a response with status code 200, with default header values.

NoContentResponse indicates success but that no response body is expected or included.
*/
type DeleteMonitorOK struct {
}

// IsSuccess returns true when this delete monitor o k response has a 2xx status code
func (o *DeleteMonitorOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete monitor o k response has a 3xx status code
func (o *DeleteMonitorOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete monitor o k response has a 4xx status code
func (o *DeleteMonitorOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete monitor o k response has a 5xx status code
func (o *DeleteMonitorOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete monitor o k response a status code equal to that given
func (o *DeleteMonitorOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete monitor o k response
func (o *DeleteMonitorOK) Code() int {
	return 200
}

func (o *DeleteMonitorOK) Error() string {
	return fmt.Sprintf("[DELETE /api/monitors/{id}][%d] deleteMonitorOK", 200)
}

func (o *DeleteMonitorOK) String() string {
	return fmt.Sprintf("[DELETE /api/monitors/{id}][%d] deleteMonitorOK", 200)
}

func (o *DeleteMonitorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteMonitorBadRequest creates a DeleteMonitorBadRequest with default headers values
func NewDeleteMonitorBadRequest() *DeleteMonitorBadRequest {
	return &DeleteMonitorBadRequest{}
}

/*
DeleteMonitorBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type DeleteMonitorBadRequest struct {
	Payload *DeleteMonitorBadRequestBody
}

// IsSuccess returns true when this delete monitor bad request response has a 2xx status code
func (o *DeleteMonitorBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete monitor bad request response has a 3xx status code
func (o *DeleteMonitorBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete monitor bad request response has a 4xx status code
func (o *DeleteMonitorBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete monitor bad request response has a 5xx status code
func (o *DeleteMonitorBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete monitor bad request response a status code equal to that given
func (o *DeleteMonitorBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete monitor bad request response
func (o *DeleteMonitorBadRequest) Code() int {
	return 400
}

func (o *DeleteMonitorBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/monitors/{id}][%d] deleteMonitorBadRequest %s", 400, payload)
}

func (o *DeleteMonitorBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/monitors/{id}][%d] deleteMonitorBadRequest %s", 400, payload)
}

func (o *DeleteMonitorBadRequest) GetPayload() *DeleteMonitorBadRequestBody {
	return o.Payload
}

func (o *DeleteMonitorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteMonitorBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMonitorNotFound creates a DeleteMonitorNotFound with default headers values
func NewDeleteMonitorNotFound() *DeleteMonitorNotFound {
	return &DeleteMonitorNotFound{}
}

/*
DeleteMonitorNotFound describes a response with status code 404, with default header values.

ErrorResponse defines a common error response structure.
*/
type DeleteMonitorNotFound struct {
	Payload *DeleteMonitorNotFoundBody
}

// IsSuccess returns true when this delete monitor not found response has a 2xx status code
func (o *DeleteMonitorNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete monitor not found response has a 3xx status code
func (o *DeleteMonitorNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete monitor not found response has a 4xx status code
func (o *DeleteMonitorNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete monitor not found response has a 5xx status code
func (o *DeleteMonitorNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete monitor not found response a status code equal to that given
func (o *DeleteMonitorNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete monitor not found response
func (o *DeleteMonitorNotFound) Code() int {
	return 404
}

func (o *DeleteMonitorNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/monitors/{id}][%d] deleteMonitorNotFound %s", 404, payload)
}

func (o *DeleteMonitorNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/monitors/{id}][%d] deleteMonitorNotFound %s", 404, payload)
}

func (o *DeleteMonitorNotFound) GetPayload() *DeleteMonitorNotFoundBody {
	return o.Payload
}

func (o *DeleteMonitorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteMonitorNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMonitorInternalServerError creates a DeleteMonitorInternalServerError with default headers values
func NewDeleteMonitorInternalServerError() *DeleteMonitorInternalServerError {
	return &DeleteMonitorInternalServerError{}
}

/*
DeleteMonitorInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type DeleteMonitorInternalServerError struct {
	Payload *DeleteMonitorInternalServerErrorBody
}

// IsSuccess returns true when this delete monitor internal server error response has a 2xx status code
func (o *DeleteMonitorInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete monitor internal server error response has a 3xx status code
func (o *DeleteMonitorInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete monitor internal server error response has a 4xx status code
func (o *DeleteMonitorInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete monitor internal server error response has a 5xx status code
func (o *DeleteMonitorInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete monitor internal server error response a status code equal to that given
func (o *DeleteMonitorInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete monitor internal server error response
func (o *DeleteMonitorInternalServerError) Code() int {
	return 500
}

func (o *DeleteMonitorInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/monitors/{id}][%d] deleteMonitorInternalServerError %s", 500, payload)
}

func (o *DeleteMonitorInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/monitors/{id}][%d] deleteMonitorInternalServerError %s", 500, payload)
}

func (o *DeleteMonitorInternalServerError) GetPayload() *DeleteMonitorInternalServerErrorBody {
	return o.Payload
}

func (o *DeleteMonitorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteMonitorInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DeleteMonitorBadRequestBody delete monitor bad request body
swagger:model DeleteMonitorBadRequestBody
*/
type DeleteMonitorBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete monitor bad request body
func (o *DeleteMonitorBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete monitor bad request body based on context it is used
func (o *DeleteMonitorBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteMonitorBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteMonitorBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteMonitorBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteMonitorInternalServerErrorBody delete monitor internal server error body
swagger:model DeleteMonitorInternalServerErrorBody
*/
type DeleteMonitorInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete monitor internal server error body
func (o *DeleteMonitorInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete monitor internal server error body based on context it is used
func (o *DeleteMonitorInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteMonitorInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteMonitorInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DeleteMonitorInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteMonitorNotFoundBody delete monitor not found body
swagger:model DeleteMonitorNotFoundBody
*/
type DeleteMonitorNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete monitor not found body
func (o *DeleteMonitorNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete monitor not found body based on context it is used
func (o *DeleteMonitorNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteMonitorNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteMonitorNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteMonitorNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
