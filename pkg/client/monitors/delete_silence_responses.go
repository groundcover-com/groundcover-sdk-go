// Code generated by go-swagger; DO NOT EDIT.

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeleteSilenceReader is a Reader for the DeleteSilence structure.
type DeleteSilenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSilenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSilenceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSilenceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteSilenceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /api/monitors/silences/{id}] deleteSilence", response, response.Code())
	}
}

// NewDeleteSilenceOK creates a DeleteSilenceOK with default headers values
func NewDeleteSilenceOK() *DeleteSilenceOK {
	return &DeleteSilenceOK{}
}

/*
DeleteSilenceOK describes a response with status code 200, with default header values.

NoContentResponse indicates success but that no response body is expected or included.
*/
type DeleteSilenceOK struct {
}

// IsSuccess returns true when this delete silence o k response has a 2xx status code
func (o *DeleteSilenceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete silence o k response has a 3xx status code
func (o *DeleteSilenceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete silence o k response has a 4xx status code
func (o *DeleteSilenceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete silence o k response has a 5xx status code
func (o *DeleteSilenceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete silence o k response a status code equal to that given
func (o *DeleteSilenceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete silence o k response
func (o *DeleteSilenceOK) Code() int {
	return 200
}

func (o *DeleteSilenceOK) Error() string {
	return fmt.Sprintf("[DELETE /api/monitors/silences/{id}][%d] deleteSilenceOK", 200)
}

func (o *DeleteSilenceOK) String() string {
	return fmt.Sprintf("[DELETE /api/monitors/silences/{id}][%d] deleteSilenceOK", 200)
}

func (o *DeleteSilenceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSilenceBadRequest creates a DeleteSilenceBadRequest with default headers values
func NewDeleteSilenceBadRequest() *DeleteSilenceBadRequest {
	return &DeleteSilenceBadRequest{}
}

/*
DeleteSilenceBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type DeleteSilenceBadRequest struct {
	Payload *DeleteSilenceBadRequestBody
}

// IsSuccess returns true when this delete silence bad request response has a 2xx status code
func (o *DeleteSilenceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete silence bad request response has a 3xx status code
func (o *DeleteSilenceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete silence bad request response has a 4xx status code
func (o *DeleteSilenceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete silence bad request response has a 5xx status code
func (o *DeleteSilenceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete silence bad request response a status code equal to that given
func (o *DeleteSilenceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete silence bad request response
func (o *DeleteSilenceBadRequest) Code() int {
	return 400
}

func (o *DeleteSilenceBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/monitors/silences/{id}][%d] deleteSilenceBadRequest %s", 400, payload)
}

func (o *DeleteSilenceBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/monitors/silences/{id}][%d] deleteSilenceBadRequest %s", 400, payload)
}

func (o *DeleteSilenceBadRequest) GetPayload() *DeleteSilenceBadRequestBody {
	return o.Payload
}

func (o *DeleteSilenceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteSilenceBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSilenceInternalServerError creates a DeleteSilenceInternalServerError with default headers values
func NewDeleteSilenceInternalServerError() *DeleteSilenceInternalServerError {
	return &DeleteSilenceInternalServerError{}
}

/*
DeleteSilenceInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type DeleteSilenceInternalServerError struct {
	Payload *DeleteSilenceInternalServerErrorBody
}

// IsSuccess returns true when this delete silence internal server error response has a 2xx status code
func (o *DeleteSilenceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete silence internal server error response has a 3xx status code
func (o *DeleteSilenceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete silence internal server error response has a 4xx status code
func (o *DeleteSilenceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete silence internal server error response has a 5xx status code
func (o *DeleteSilenceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete silence internal server error response a status code equal to that given
func (o *DeleteSilenceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete silence internal server error response
func (o *DeleteSilenceInternalServerError) Code() int {
	return 500
}

func (o *DeleteSilenceInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/monitors/silences/{id}][%d] deleteSilenceInternalServerError %s", 500, payload)
}

func (o *DeleteSilenceInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/monitors/silences/{id}][%d] deleteSilenceInternalServerError %s", 500, payload)
}

func (o *DeleteSilenceInternalServerError) GetPayload() *DeleteSilenceInternalServerErrorBody {
	return o.Payload
}

func (o *DeleteSilenceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteSilenceInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DeleteSilenceBadRequestBody delete silence bad request body
swagger:model DeleteSilenceBadRequestBody
*/
type DeleteSilenceBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete silence bad request body
func (o *DeleteSilenceBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete silence bad request body based on context it is used
func (o *DeleteSilenceBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSilenceBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSilenceBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteSilenceBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteSilenceInternalServerErrorBody delete silence internal server error body
swagger:model DeleteSilenceInternalServerErrorBody
*/
type DeleteSilenceInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete silence internal server error body
func (o *DeleteSilenceInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete silence internal server error body based on context it is used
func (o *DeleteSilenceInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSilenceInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSilenceInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DeleteSilenceInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
