// Code generated by go-swagger; DO NOT EDIT.

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/groundcover-com/groundcover-sdk-go/pkg/models"
)

// ListMonitorsReader is a Reader for the ListMonitors structure.
type ListMonitorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListMonitorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListMonitorsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListMonitorsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListMonitorsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /monitors/list] listMonitors", response, response.Code())
	}
}

// NewListMonitorsOK creates a ListMonitorsOK with default headers values
func NewListMonitorsOK() *ListMonitorsOK {
	return &ListMonitorsOK{}
}

/*
ListMonitorsOK describes a response with status code 200, with default header values.

MonitorListResponseWrapper defines the response structure for listing monitors.
*/
type ListMonitorsOK struct {
	Payload *models.MonitorListResponse
}

// IsSuccess returns true when this list monitors o k response has a 2xx status code
func (o *ListMonitorsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list monitors o k response has a 3xx status code
func (o *ListMonitorsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list monitors o k response has a 4xx status code
func (o *ListMonitorsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list monitors o k response has a 5xx status code
func (o *ListMonitorsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list monitors o k response a status code equal to that given
func (o *ListMonitorsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list monitors o k response
func (o *ListMonitorsOK) Code() int {
	return 200
}

func (o *ListMonitorsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /monitors/list][%d] listMonitorsOK %s", 200, payload)
}

func (o *ListMonitorsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /monitors/list][%d] listMonitorsOK %s", 200, payload)
}

func (o *ListMonitorsOK) GetPayload() *models.MonitorListResponse {
	return o.Payload
}

func (o *ListMonitorsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MonitorListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListMonitorsBadRequest creates a ListMonitorsBadRequest with default headers values
func NewListMonitorsBadRequest() *ListMonitorsBadRequest {
	return &ListMonitorsBadRequest{}
}

/*
ListMonitorsBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type ListMonitorsBadRequest struct {
	Payload *ListMonitorsBadRequestBody
}

// IsSuccess returns true when this list monitors bad request response has a 2xx status code
func (o *ListMonitorsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list monitors bad request response has a 3xx status code
func (o *ListMonitorsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list monitors bad request response has a 4xx status code
func (o *ListMonitorsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list monitors bad request response has a 5xx status code
func (o *ListMonitorsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list monitors bad request response a status code equal to that given
func (o *ListMonitorsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list monitors bad request response
func (o *ListMonitorsBadRequest) Code() int {
	return 400
}

func (o *ListMonitorsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /monitors/list][%d] listMonitorsBadRequest %s", 400, payload)
}

func (o *ListMonitorsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /monitors/list][%d] listMonitorsBadRequest %s", 400, payload)
}

func (o *ListMonitorsBadRequest) GetPayload() *ListMonitorsBadRequestBody {
	return o.Payload
}

func (o *ListMonitorsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListMonitorsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListMonitorsInternalServerError creates a ListMonitorsInternalServerError with default headers values
func NewListMonitorsInternalServerError() *ListMonitorsInternalServerError {
	return &ListMonitorsInternalServerError{}
}

/*
ListMonitorsInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type ListMonitorsInternalServerError struct {
	Payload *ListMonitorsInternalServerErrorBody
}

// IsSuccess returns true when this list monitors internal server error response has a 2xx status code
func (o *ListMonitorsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list monitors internal server error response has a 3xx status code
func (o *ListMonitorsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list monitors internal server error response has a 4xx status code
func (o *ListMonitorsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list monitors internal server error response has a 5xx status code
func (o *ListMonitorsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list monitors internal server error response a status code equal to that given
func (o *ListMonitorsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list monitors internal server error response
func (o *ListMonitorsInternalServerError) Code() int {
	return 500
}

func (o *ListMonitorsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /monitors/list][%d] listMonitorsInternalServerError %s", 500, payload)
}

func (o *ListMonitorsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /monitors/list][%d] listMonitorsInternalServerError %s", 500, payload)
}

func (o *ListMonitorsInternalServerError) GetPayload() *ListMonitorsInternalServerErrorBody {
	return o.Payload
}

func (o *ListMonitorsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListMonitorsInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListMonitorsBadRequestBody list monitors bad request body
swagger:model ListMonitorsBadRequestBody
*/
type ListMonitorsBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this list monitors bad request body
func (o *ListMonitorsBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list monitors bad request body based on context it is used
func (o *ListMonitorsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListMonitorsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListMonitorsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ListMonitorsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListMonitorsInternalServerErrorBody list monitors internal server error body
swagger:model ListMonitorsInternalServerErrorBody
*/
type ListMonitorsInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this list monitors internal server error body
func (o *ListMonitorsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list monitors internal server error body based on context it is used
func (o *ListMonitorsInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListMonitorsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListMonitorsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ListMonitorsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
