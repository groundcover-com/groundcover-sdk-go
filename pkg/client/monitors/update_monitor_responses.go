// Code generated by go-swagger; DO NOT EDIT.

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateMonitorReader is a Reader for the UpdateMonitor structure.
type UpdateMonitorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMonitorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 202:
		result := NewUpdateMonitorAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateMonitorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateMonitorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateMonitorConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateMonitorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/monitors/{id}] updateMonitor", response, response.Code())
	}
}

// NewUpdateMonitorAccepted creates a UpdateMonitorAccepted with default headers values
func NewUpdateMonitorAccepted() *UpdateMonitorAccepted {
	return &UpdateMonitorAccepted{}
}

/*
UpdateMonitorAccepted describes a response with status code 202, with default header values.

UpdateMonitorAccepted update monitor accepted
*/
type UpdateMonitorAccepted struct {
}

// IsSuccess returns true when this update monitor accepted response has a 2xx status code
func (o *UpdateMonitorAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update monitor accepted response has a 3xx status code
func (o *UpdateMonitorAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update monitor accepted response has a 4xx status code
func (o *UpdateMonitorAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update monitor accepted response has a 5xx status code
func (o *UpdateMonitorAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update monitor accepted response a status code equal to that given
func (o *UpdateMonitorAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the update monitor accepted response
func (o *UpdateMonitorAccepted) Code() int {
	return 202
}

func (o *UpdateMonitorAccepted) Error() string {
	return fmt.Sprintf("[PUT /api/monitors/{id}][%d] updateMonitorAccepted", 202)
}

func (o *UpdateMonitorAccepted) String() string {
	return fmt.Sprintf("[PUT /api/monitors/{id}][%d] updateMonitorAccepted", 202)
}

func (o *UpdateMonitorAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateMonitorBadRequest creates a UpdateMonitorBadRequest with default headers values
func NewUpdateMonitorBadRequest() *UpdateMonitorBadRequest {
	return &UpdateMonitorBadRequest{}
}

/*
UpdateMonitorBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type UpdateMonitorBadRequest struct {
	Payload *UpdateMonitorBadRequestBody
}

// IsSuccess returns true when this update monitor bad request response has a 2xx status code
func (o *UpdateMonitorBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update monitor bad request response has a 3xx status code
func (o *UpdateMonitorBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update monitor bad request response has a 4xx status code
func (o *UpdateMonitorBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update monitor bad request response has a 5xx status code
func (o *UpdateMonitorBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update monitor bad request response a status code equal to that given
func (o *UpdateMonitorBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update monitor bad request response
func (o *UpdateMonitorBadRequest) Code() int {
	return 400
}

func (o *UpdateMonitorBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/monitors/{id}][%d] updateMonitorBadRequest %s", 400, payload)
}

func (o *UpdateMonitorBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/monitors/{id}][%d] updateMonitorBadRequest %s", 400, payload)
}

func (o *UpdateMonitorBadRequest) GetPayload() *UpdateMonitorBadRequestBody {
	return o.Payload
}

func (o *UpdateMonitorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateMonitorBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateMonitorNotFound creates a UpdateMonitorNotFound with default headers values
func NewUpdateMonitorNotFound() *UpdateMonitorNotFound {
	return &UpdateMonitorNotFound{}
}

/*
UpdateMonitorNotFound describes a response with status code 404, with default header values.

ErrorResponse defines a common error response structure.
*/
type UpdateMonitorNotFound struct {
	Payload *UpdateMonitorNotFoundBody
}

// IsSuccess returns true when this update monitor not found response has a 2xx status code
func (o *UpdateMonitorNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update monitor not found response has a 3xx status code
func (o *UpdateMonitorNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update monitor not found response has a 4xx status code
func (o *UpdateMonitorNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update monitor not found response has a 5xx status code
func (o *UpdateMonitorNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update monitor not found response a status code equal to that given
func (o *UpdateMonitorNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update monitor not found response
func (o *UpdateMonitorNotFound) Code() int {
	return 404
}

func (o *UpdateMonitorNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/monitors/{id}][%d] updateMonitorNotFound %s", 404, payload)
}

func (o *UpdateMonitorNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/monitors/{id}][%d] updateMonitorNotFound %s", 404, payload)
}

func (o *UpdateMonitorNotFound) GetPayload() *UpdateMonitorNotFoundBody {
	return o.Payload
}

func (o *UpdateMonitorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateMonitorNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateMonitorConflict creates a UpdateMonitorConflict with default headers values
func NewUpdateMonitorConflict() *UpdateMonitorConflict {
	return &UpdateMonitorConflict{}
}

/*
UpdateMonitorConflict describes a response with status code 409, with default header values.

ErrorResponse defines a common error response structure.
*/
type UpdateMonitorConflict struct {
	Payload *UpdateMonitorConflictBody
}

// IsSuccess returns true when this update monitor conflict response has a 2xx status code
func (o *UpdateMonitorConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update monitor conflict response has a 3xx status code
func (o *UpdateMonitorConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update monitor conflict response has a 4xx status code
func (o *UpdateMonitorConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update monitor conflict response has a 5xx status code
func (o *UpdateMonitorConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update monitor conflict response a status code equal to that given
func (o *UpdateMonitorConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update monitor conflict response
func (o *UpdateMonitorConflict) Code() int {
	return 409
}

func (o *UpdateMonitorConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/monitors/{id}][%d] updateMonitorConflict %s", 409, payload)
}

func (o *UpdateMonitorConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/monitors/{id}][%d] updateMonitorConflict %s", 409, payload)
}

func (o *UpdateMonitorConflict) GetPayload() *UpdateMonitorConflictBody {
	return o.Payload
}

func (o *UpdateMonitorConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateMonitorConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateMonitorInternalServerError creates a UpdateMonitorInternalServerError with default headers values
func NewUpdateMonitorInternalServerError() *UpdateMonitorInternalServerError {
	return &UpdateMonitorInternalServerError{}
}

/*
UpdateMonitorInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type UpdateMonitorInternalServerError struct {
	Payload *UpdateMonitorInternalServerErrorBody
}

// IsSuccess returns true when this update monitor internal server error response has a 2xx status code
func (o *UpdateMonitorInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update monitor internal server error response has a 3xx status code
func (o *UpdateMonitorInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update monitor internal server error response has a 4xx status code
func (o *UpdateMonitorInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update monitor internal server error response has a 5xx status code
func (o *UpdateMonitorInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update monitor internal server error response a status code equal to that given
func (o *UpdateMonitorInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update monitor internal server error response
func (o *UpdateMonitorInternalServerError) Code() int {
	return 500
}

func (o *UpdateMonitorInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/monitors/{id}][%d] updateMonitorInternalServerError %s", 500, payload)
}

func (o *UpdateMonitorInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/monitors/{id}][%d] updateMonitorInternalServerError %s", 500, payload)
}

func (o *UpdateMonitorInternalServerError) GetPayload() *UpdateMonitorInternalServerErrorBody {
	return o.Payload
}

func (o *UpdateMonitorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateMonitorInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
UpdateMonitorBadRequestBody update monitor bad request body
swagger:model UpdateMonitorBadRequestBody
*/
type UpdateMonitorBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update monitor bad request body
func (o *UpdateMonitorBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update monitor bad request body based on context it is used
func (o *UpdateMonitorBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateMonitorBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateMonitorBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateMonitorBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateMonitorConflictBody update monitor conflict body
swagger:model UpdateMonitorConflictBody
*/
type UpdateMonitorConflictBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update monitor conflict body
func (o *UpdateMonitorConflictBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update monitor conflict body based on context it is used
func (o *UpdateMonitorConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateMonitorConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateMonitorConflictBody) UnmarshalBinary(b []byte) error {
	var res UpdateMonitorConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateMonitorInternalServerErrorBody update monitor internal server error body
swagger:model UpdateMonitorInternalServerErrorBody
*/
type UpdateMonitorInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update monitor internal server error body
func (o *UpdateMonitorInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update monitor internal server error body based on context it is used
func (o *UpdateMonitorInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateMonitorInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateMonitorInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res UpdateMonitorInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateMonitorNotFoundBody update monitor not found body
swagger:model UpdateMonitorNotFoundBody
*/
type UpdateMonitorNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update monitor not found body
func (o *UpdateMonitorNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update monitor not found body based on context it is used
func (o *UpdateMonitorNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateMonitorNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateMonitorNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateMonitorNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
