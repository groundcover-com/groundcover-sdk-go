// Code generated by go-swagger; DO NOT EDIT.

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/groundcover-com/groundcover-sdk-go/pkg/models"
)

// CreateMonitorReader is a Reader for the CreateMonitor structure.
type CreateMonitorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateMonitorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateMonitorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateMonitorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateMonitorConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateMonitorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/monitors] createMonitor", response, response.Code())
	}
}

// NewCreateMonitorOK creates a CreateMonitorOK with default headers values
func NewCreateMonitorOK() *CreateMonitorOK {
	return &CreateMonitorOK{}
}

/*
CreateMonitorOK describes a response with status code 200, with default header values.

CreateMonitorResponseWrapper defines the response structure for creating a monitor.
*/
type CreateMonitorOK struct {
	Payload *models.CreateMonitorResponse
}

// IsSuccess returns true when this create monitor o k response has a 2xx status code
func (o *CreateMonitorOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create monitor o k response has a 3xx status code
func (o *CreateMonitorOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create monitor o k response has a 4xx status code
func (o *CreateMonitorOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create monitor o k response has a 5xx status code
func (o *CreateMonitorOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create monitor o k response a status code equal to that given
func (o *CreateMonitorOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create monitor o k response
func (o *CreateMonitorOK) Code() int {
	return 200
}

func (o *CreateMonitorOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/monitors][%d] createMonitorOK %s", 200, payload)
}

func (o *CreateMonitorOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/monitors][%d] createMonitorOK %s", 200, payload)
}

func (o *CreateMonitorOK) GetPayload() *models.CreateMonitorResponse {
	return o.Payload
}

func (o *CreateMonitorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateMonitorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMonitorBadRequest creates a CreateMonitorBadRequest with default headers values
func NewCreateMonitorBadRequest() *CreateMonitorBadRequest {
	return &CreateMonitorBadRequest{}
}

/*
CreateMonitorBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type CreateMonitorBadRequest struct {
	Payload *CreateMonitorBadRequestBody
}

// IsSuccess returns true when this create monitor bad request response has a 2xx status code
func (o *CreateMonitorBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create monitor bad request response has a 3xx status code
func (o *CreateMonitorBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create monitor bad request response has a 4xx status code
func (o *CreateMonitorBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create monitor bad request response has a 5xx status code
func (o *CreateMonitorBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create monitor bad request response a status code equal to that given
func (o *CreateMonitorBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create monitor bad request response
func (o *CreateMonitorBadRequest) Code() int {
	return 400
}

func (o *CreateMonitorBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/monitors][%d] createMonitorBadRequest %s", 400, payload)
}

func (o *CreateMonitorBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/monitors][%d] createMonitorBadRequest %s", 400, payload)
}

func (o *CreateMonitorBadRequest) GetPayload() *CreateMonitorBadRequestBody {
	return o.Payload
}

func (o *CreateMonitorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateMonitorBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMonitorConflict creates a CreateMonitorConflict with default headers values
func NewCreateMonitorConflict() *CreateMonitorConflict {
	return &CreateMonitorConflict{}
}

/*
CreateMonitorConflict describes a response with status code 409, with default header values.

ErrorResponse defines a common error response structure.
*/
type CreateMonitorConflict struct {
	Payload *CreateMonitorConflictBody
}

// IsSuccess returns true when this create monitor conflict response has a 2xx status code
func (o *CreateMonitorConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create monitor conflict response has a 3xx status code
func (o *CreateMonitorConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create monitor conflict response has a 4xx status code
func (o *CreateMonitorConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create monitor conflict response has a 5xx status code
func (o *CreateMonitorConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create monitor conflict response a status code equal to that given
func (o *CreateMonitorConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create monitor conflict response
func (o *CreateMonitorConflict) Code() int {
	return 409
}

func (o *CreateMonitorConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/monitors][%d] createMonitorConflict %s", 409, payload)
}

func (o *CreateMonitorConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/monitors][%d] createMonitorConflict %s", 409, payload)
}

func (o *CreateMonitorConflict) GetPayload() *CreateMonitorConflictBody {
	return o.Payload
}

func (o *CreateMonitorConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateMonitorConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMonitorInternalServerError creates a CreateMonitorInternalServerError with default headers values
func NewCreateMonitorInternalServerError() *CreateMonitorInternalServerError {
	return &CreateMonitorInternalServerError{}
}

/*
CreateMonitorInternalServerError describes a response with status code 500, with default header values.

CreateMonitorInternalServerError create monitor internal server error
*/
type CreateMonitorInternalServerError struct {
}

// IsSuccess returns true when this create monitor internal server error response has a 2xx status code
func (o *CreateMonitorInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create monitor internal server error response has a 3xx status code
func (o *CreateMonitorInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create monitor internal server error response has a 4xx status code
func (o *CreateMonitorInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create monitor internal server error response has a 5xx status code
func (o *CreateMonitorInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create monitor internal server error response a status code equal to that given
func (o *CreateMonitorInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create monitor internal server error response
func (o *CreateMonitorInternalServerError) Code() int {
	return 500
}

func (o *CreateMonitorInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/monitors][%d] createMonitorInternalServerError", 500)
}

func (o *CreateMonitorInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/monitors][%d] createMonitorInternalServerError", 500)
}

func (o *CreateMonitorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
CreateMonitorBadRequestBody create monitor bad request body
swagger:model CreateMonitorBadRequestBody
*/
type CreateMonitorBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this create monitor bad request body
func (o *CreateMonitorBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create monitor bad request body based on context it is used
func (o *CreateMonitorBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateMonitorBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateMonitorBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateMonitorBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateMonitorConflictBody create monitor conflict body
swagger:model CreateMonitorConflictBody
*/
type CreateMonitorConflictBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this create monitor conflict body
func (o *CreateMonitorConflictBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create monitor conflict body based on context it is used
func (o *CreateMonitorConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateMonitorConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateMonitorConflictBody) UnmarshalBinary(b []byte) error {
	var res CreateMonitorConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
