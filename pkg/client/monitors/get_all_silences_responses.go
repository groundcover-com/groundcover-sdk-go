// Code generated by go-swagger; DO NOT EDIT.

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/groundcover-com/groundcover-sdk-go/pkg/models"
)

// GetAllSilencesReader is a Reader for the GetAllSilences structure.
type GetAllSilencesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllSilencesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllSilencesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllSilencesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllSilencesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/monitors/silences] getAllSilences", response, response.Code())
	}
}

// NewGetAllSilencesOK creates a GetAllSilencesOK with default headers values
func NewGetAllSilencesOK() *GetAllSilencesOK {
	return &GetAllSilencesOK{}
}

/*
GetAllSilencesOK describes a response with status code 200, with default header values.

GetAllSilencesOK get all silences o k
*/
type GetAllSilencesOK struct {
	Payload []*models.Silence
}

// IsSuccess returns true when this get all silences o k response has a 2xx status code
func (o *GetAllSilencesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all silences o k response has a 3xx status code
func (o *GetAllSilencesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all silences o k response has a 4xx status code
func (o *GetAllSilencesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all silences o k response has a 5xx status code
func (o *GetAllSilencesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all silences o k response a status code equal to that given
func (o *GetAllSilencesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all silences o k response
func (o *GetAllSilencesOK) Code() int {
	return 200
}

func (o *GetAllSilencesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/silences][%d] getAllSilencesOK %s", 200, payload)
}

func (o *GetAllSilencesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/silences][%d] getAllSilencesOK %s", 200, payload)
}

func (o *GetAllSilencesOK) GetPayload() []*models.Silence {
	return o.Payload
}

func (o *GetAllSilencesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllSilencesBadRequest creates a GetAllSilencesBadRequest with default headers values
func NewGetAllSilencesBadRequest() *GetAllSilencesBadRequest {
	return &GetAllSilencesBadRequest{}
}

/*
GetAllSilencesBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type GetAllSilencesBadRequest struct {
	Payload *GetAllSilencesBadRequestBody
}

// IsSuccess returns true when this get all silences bad request response has a 2xx status code
func (o *GetAllSilencesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all silences bad request response has a 3xx status code
func (o *GetAllSilencesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all silences bad request response has a 4xx status code
func (o *GetAllSilencesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all silences bad request response has a 5xx status code
func (o *GetAllSilencesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all silences bad request response a status code equal to that given
func (o *GetAllSilencesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all silences bad request response
func (o *GetAllSilencesBadRequest) Code() int {
	return 400
}

func (o *GetAllSilencesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/silences][%d] getAllSilencesBadRequest %s", 400, payload)
}

func (o *GetAllSilencesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/silences][%d] getAllSilencesBadRequest %s", 400, payload)
}

func (o *GetAllSilencesBadRequest) GetPayload() *GetAllSilencesBadRequestBody {
	return o.Payload
}

func (o *GetAllSilencesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAllSilencesBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllSilencesInternalServerError creates a GetAllSilencesInternalServerError with default headers values
func NewGetAllSilencesInternalServerError() *GetAllSilencesInternalServerError {
	return &GetAllSilencesInternalServerError{}
}

/*
GetAllSilencesInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type GetAllSilencesInternalServerError struct {
	Payload *GetAllSilencesInternalServerErrorBody
}

// IsSuccess returns true when this get all silences internal server error response has a 2xx status code
func (o *GetAllSilencesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all silences internal server error response has a 3xx status code
func (o *GetAllSilencesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all silences internal server error response has a 4xx status code
func (o *GetAllSilencesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all silences internal server error response has a 5xx status code
func (o *GetAllSilencesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all silences internal server error response a status code equal to that given
func (o *GetAllSilencesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all silences internal server error response
func (o *GetAllSilencesInternalServerError) Code() int {
	return 500
}

func (o *GetAllSilencesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/silences][%d] getAllSilencesInternalServerError %s", 500, payload)
}

func (o *GetAllSilencesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/monitors/silences][%d] getAllSilencesInternalServerError %s", 500, payload)
}

func (o *GetAllSilencesInternalServerError) GetPayload() *GetAllSilencesInternalServerErrorBody {
	return o.Payload
}

func (o *GetAllSilencesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAllSilencesInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetAllSilencesBadRequestBody get all silences bad request body
swagger:model GetAllSilencesBadRequestBody
*/
type GetAllSilencesBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get all silences bad request body
func (o *GetAllSilencesBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all silences bad request body based on context it is used
func (o *GetAllSilencesBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSilencesBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSilencesBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetAllSilencesBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSilencesInternalServerErrorBody get all silences internal server error body
swagger:model GetAllSilencesInternalServerErrorBody
*/
type GetAllSilencesInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get all silences internal server error body
func (o *GetAllSilencesInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all silences internal server error body based on context it is used
func (o *GetAllSilencesInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSilencesInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSilencesInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetAllSilencesInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
