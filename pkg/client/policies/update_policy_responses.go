// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/groundcover-com/groundcover-sdk-go/pkg/models"
)

// UpdatePolicyReader is a Reader for the UpdatePolicy structure.
type UpdatePolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewUpdatePolicyAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdatePolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/rbac/policies/{id}] updatePolicy", response, response.Code())
	}
}

// NewUpdatePolicyAccepted creates a UpdatePolicyAccepted with default headers values
func NewUpdatePolicyAccepted() *UpdatePolicyAccepted {
	return &UpdatePolicyAccepted{}
}

/*
UpdatePolicyAccepted describes a response with status code 202, with default header values.

Add response wrapper definition ---
*/
type UpdatePolicyAccepted struct {
	Payload *models.Policy
}

// IsSuccess returns true when this update policy accepted response has a 2xx status code
func (o *UpdatePolicyAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update policy accepted response has a 3xx status code
func (o *UpdatePolicyAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy accepted response has a 4xx status code
func (o *UpdatePolicyAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update policy accepted response has a 5xx status code
func (o *UpdatePolicyAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update policy accepted response a status code equal to that given
func (o *UpdatePolicyAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the update policy accepted response
func (o *UpdatePolicyAccepted) Code() int {
	return 202
}

func (o *UpdatePolicyAccepted) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/policies/{id}][%d] updatePolicyAccepted %s", 202, payload)
}

func (o *UpdatePolicyAccepted) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/policies/{id}][%d] updatePolicyAccepted %s", 202, payload)
}

func (o *UpdatePolicyAccepted) GetPayload() *models.Policy {
	return o.Payload
}

func (o *UpdatePolicyAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Policy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyBadRequest creates a UpdatePolicyBadRequest with default headers values
func NewUpdatePolicyBadRequest() *UpdatePolicyBadRequest {
	return &UpdatePolicyBadRequest{}
}

/*
UpdatePolicyBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type UpdatePolicyBadRequest struct {
	Payload *UpdatePolicyBadRequestBody
}

// IsSuccess returns true when this update policy bad request response has a 2xx status code
func (o *UpdatePolicyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update policy bad request response has a 3xx status code
func (o *UpdatePolicyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy bad request response has a 4xx status code
func (o *UpdatePolicyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update policy bad request response has a 5xx status code
func (o *UpdatePolicyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update policy bad request response a status code equal to that given
func (o *UpdatePolicyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update policy bad request response
func (o *UpdatePolicyBadRequest) Code() int {
	return 400
}

func (o *UpdatePolicyBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/policies/{id}][%d] updatePolicyBadRequest %s", 400, payload)
}

func (o *UpdatePolicyBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/policies/{id}][%d] updatePolicyBadRequest %s", 400, payload)
}

func (o *UpdatePolicyBadRequest) GetPayload() *UpdatePolicyBadRequestBody {
	return o.Payload
}

func (o *UpdatePolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdatePolicyBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyNotFound creates a UpdatePolicyNotFound with default headers values
func NewUpdatePolicyNotFound() *UpdatePolicyNotFound {
	return &UpdatePolicyNotFound{}
}

/*
UpdatePolicyNotFound describes a response with status code 404, with default header values.

ErrorResponse defines a common error response structure.
*/
type UpdatePolicyNotFound struct {
	Payload *UpdatePolicyNotFoundBody
}

// IsSuccess returns true when this update policy not found response has a 2xx status code
func (o *UpdatePolicyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update policy not found response has a 3xx status code
func (o *UpdatePolicyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy not found response has a 4xx status code
func (o *UpdatePolicyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update policy not found response has a 5xx status code
func (o *UpdatePolicyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update policy not found response a status code equal to that given
func (o *UpdatePolicyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update policy not found response
func (o *UpdatePolicyNotFound) Code() int {
	return 404
}

func (o *UpdatePolicyNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/policies/{id}][%d] updatePolicyNotFound %s", 404, payload)
}

func (o *UpdatePolicyNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/policies/{id}][%d] updatePolicyNotFound %s", 404, payload)
}

func (o *UpdatePolicyNotFound) GetPayload() *UpdatePolicyNotFoundBody {
	return o.Payload
}

func (o *UpdatePolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdatePolicyNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyInternalServerError creates a UpdatePolicyInternalServerError with default headers values
func NewUpdatePolicyInternalServerError() *UpdatePolicyInternalServerError {
	return &UpdatePolicyInternalServerError{}
}

/*
UpdatePolicyInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type UpdatePolicyInternalServerError struct {
	Payload *UpdatePolicyInternalServerErrorBody
}

// IsSuccess returns true when this update policy internal server error response has a 2xx status code
func (o *UpdatePolicyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update policy internal server error response has a 3xx status code
func (o *UpdatePolicyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy internal server error response has a 4xx status code
func (o *UpdatePolicyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update policy internal server error response has a 5xx status code
func (o *UpdatePolicyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update policy internal server error response a status code equal to that given
func (o *UpdatePolicyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update policy internal server error response
func (o *UpdatePolicyInternalServerError) Code() int {
	return 500
}

func (o *UpdatePolicyInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/policies/{id}][%d] updatePolicyInternalServerError %s", 500, payload)
}

func (o *UpdatePolicyInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/policies/{id}][%d] updatePolicyInternalServerError %s", 500, payload)
}

func (o *UpdatePolicyInternalServerError) GetPayload() *UpdatePolicyInternalServerErrorBody {
	return o.Payload
}

func (o *UpdatePolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdatePolicyInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdatePolicyBadRequestBody update policy bad request body
swagger:model UpdatePolicyBadRequestBody
*/
type UpdatePolicyBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update policy bad request body
func (o *UpdatePolicyBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update policy bad request body based on context it is used
func (o *UpdatePolicyBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePolicyBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePolicyBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdatePolicyBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePolicyInternalServerErrorBody update policy internal server error body
swagger:model UpdatePolicyInternalServerErrorBody
*/
type UpdatePolicyInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update policy internal server error body
func (o *UpdatePolicyInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update policy internal server error body based on context it is used
func (o *UpdatePolicyInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePolicyInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePolicyInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res UpdatePolicyInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePolicyNotFoundBody update policy not found body
swagger:model UpdatePolicyNotFoundBody
*/
type UpdatePolicyNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update policy not found body
func (o *UpdatePolicyNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update policy not found body based on context it is used
func (o *UpdatePolicyNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePolicyNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePolicyNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdatePolicyNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
