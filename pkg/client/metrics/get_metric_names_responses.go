// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/groundcover-com/groundcover-sdk-go/pkg/models"
)

// GetMetricNamesReader is a Reader for the GetMetricNames structure.
type GetMetricNamesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMetricNamesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetMetricNamesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetMetricNamesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetMetricNamesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/metrics/names] getMetricNames", response, response.Code())
	}
}

// NewGetMetricNamesOK creates a GetMetricNamesOK with default headers values
func NewGetMetricNamesOK() *GetMetricNamesOK {
	return &GetMetricNamesOK{}
}

/*
GetMetricNamesOK describes a response with status code 200, with default header values.

GetMetricNamesOK get metric names o k
*/
type GetMetricNamesOK struct {
	Payload *models.MetricsNamesResponse
}

// IsSuccess returns true when this get metric names o k response has a 2xx status code
func (o *GetMetricNamesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get metric names o k response has a 3xx status code
func (o *GetMetricNamesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get metric names o k response has a 4xx status code
func (o *GetMetricNamesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get metric names o k response has a 5xx status code
func (o *GetMetricNamesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get metric names o k response a status code equal to that given
func (o *GetMetricNamesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get metric names o k response
func (o *GetMetricNamesOK) Code() int {
	return 200
}

func (o *GetMetricNamesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/metrics/names][%d] getMetricNamesOK %s", 200, payload)
}

func (o *GetMetricNamesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/metrics/names][%d] getMetricNamesOK %s", 200, payload)
}

func (o *GetMetricNamesOK) GetPayload() *models.MetricsNamesResponse {
	return o.Payload
}

func (o *GetMetricNamesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MetricsNamesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetMetricNamesBadRequest creates a GetMetricNamesBadRequest with default headers values
func NewGetMetricNamesBadRequest() *GetMetricNamesBadRequest {
	return &GetMetricNamesBadRequest{}
}

/*
GetMetricNamesBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type GetMetricNamesBadRequest struct {
	Payload *GetMetricNamesBadRequestBody
}

// IsSuccess returns true when this get metric names bad request response has a 2xx status code
func (o *GetMetricNamesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get metric names bad request response has a 3xx status code
func (o *GetMetricNamesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get metric names bad request response has a 4xx status code
func (o *GetMetricNamesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get metric names bad request response has a 5xx status code
func (o *GetMetricNamesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get metric names bad request response a status code equal to that given
func (o *GetMetricNamesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get metric names bad request response
func (o *GetMetricNamesBadRequest) Code() int {
	return 400
}

func (o *GetMetricNamesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/metrics/names][%d] getMetricNamesBadRequest %s", 400, payload)
}

func (o *GetMetricNamesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/metrics/names][%d] getMetricNamesBadRequest %s", 400, payload)
}

func (o *GetMetricNamesBadRequest) GetPayload() *GetMetricNamesBadRequestBody {
	return o.Payload
}

func (o *GetMetricNamesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetMetricNamesBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetMetricNamesInternalServerError creates a GetMetricNamesInternalServerError with default headers values
func NewGetMetricNamesInternalServerError() *GetMetricNamesInternalServerError {
	return &GetMetricNamesInternalServerError{}
}

/*
GetMetricNamesInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type GetMetricNamesInternalServerError struct {
	Payload *GetMetricNamesInternalServerErrorBody
}

// IsSuccess returns true when this get metric names internal server error response has a 2xx status code
func (o *GetMetricNamesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get metric names internal server error response has a 3xx status code
func (o *GetMetricNamesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get metric names internal server error response has a 4xx status code
func (o *GetMetricNamesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get metric names internal server error response has a 5xx status code
func (o *GetMetricNamesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get metric names internal server error response a status code equal to that given
func (o *GetMetricNamesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get metric names internal server error response
func (o *GetMetricNamesInternalServerError) Code() int {
	return 500
}

func (o *GetMetricNamesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/metrics/names][%d] getMetricNamesInternalServerError %s", 500, payload)
}

func (o *GetMetricNamesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/metrics/names][%d] getMetricNamesInternalServerError %s", 500, payload)
}

func (o *GetMetricNamesInternalServerError) GetPayload() *GetMetricNamesInternalServerErrorBody {
	return o.Payload
}

func (o *GetMetricNamesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetMetricNamesInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
GetMetricNamesBadRequestBody get metric names bad request body
swagger:model GetMetricNamesBadRequestBody
*/
type GetMetricNamesBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get metric names bad request body
func (o *GetMetricNamesBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get metric names bad request body based on context it is used
func (o *GetMetricNamesBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetMetricNamesBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMetricNamesBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetMetricNamesBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetMetricNamesInternalServerErrorBody get metric names internal server error body
swagger:model GetMetricNamesInternalServerErrorBody
*/
type GetMetricNamesInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get metric names internal server error body
func (o *GetMetricNamesInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get metric names internal server error body based on context it is used
func (o *GetMetricNamesInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetMetricNamesInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMetricNamesInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetMetricNamesInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
