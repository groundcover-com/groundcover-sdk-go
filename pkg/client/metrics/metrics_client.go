// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new metrics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new metrics API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new metrics API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for metrics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetMetricKeys(params *GetMetricKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetricKeysOK, error)

	GetMetricNames(params *GetMetricNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetricNamesOK, error)

	GetMetricValues(params *GetMetricValuesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetricValuesOK, error)

	MetricsQuery(params *MetricsQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MetricsQueryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetMetricKeys gets keys retrieves metric keys based on the provided request parameters
*/
func (a *Client) GetMetricKeys(params *GetMetricKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetricKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetricKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMetricKeys",
		Method:             "POST",
		PathPattern:        "/api/metrics/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMetricKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetricKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMetricKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMetricNames gets names retrieves metric names based on the provided request parameters
*/
func (a *Client) GetMetricNames(params *GetMetricNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetricNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetricNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMetricNames",
		Method:             "POST",
		PathPattern:        "/api/metrics/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMetricNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetricNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMetricNames: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMetricValues gets metric values retrieves metric values based on the provided request parameters
*/
func (a *Client) GetMetricValues(params *GetMetricValuesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetricValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetricValuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMetricValues",
		Method:             "POST",
		PathPattern:        "/api/metrics/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMetricValuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetricValuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMetricValues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	MetricsQuery executes prometheus query

	Executes a Prometheus query (instant or range) against the metrics server.

Accepts either a direct 'promql' string or components ('pipeline', 'filters', 'conditions', 'subPipelines') to build the query.
*/
func (a *Client) MetricsQuery(params *MetricsQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MetricsQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetricsQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "metricsQuery",
		Method:             "POST",
		PathPattern:        "/api/metrics/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetricsQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetricsQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metricsQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
