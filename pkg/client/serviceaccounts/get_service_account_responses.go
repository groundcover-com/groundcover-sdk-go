// Code generated by go-swagger; DO NOT EDIT.

package serviceaccounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/groundcover-com/groundcover-sdk-go/pkg/models"
)

// GetServiceAccountReader is a Reader for the GetServiceAccount structure.
type GetServiceAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServiceAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetServiceAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetServiceAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetServiceAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/rbac/service-account/{id}] getServiceAccount", response, response.Code())
	}
}

// NewGetServiceAccountOK creates a GetServiceAccountOK with default headers values
func NewGetServiceAccountOK() *GetServiceAccountOK {
	return &GetServiceAccountOK{}
}

/*
GetServiceAccountOK describes a response with status code 200, with default header values.

ServiceAccountsWithPolicyResponse defines the response structure for getting a single service account.
*/
type GetServiceAccountOK struct {
	Payload *models.ServiceAccountsWithPolicy
}

// IsSuccess returns true when this get service account o k response has a 2xx status code
func (o *GetServiceAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get service account o k response has a 3xx status code
func (o *GetServiceAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service account o k response has a 4xx status code
func (o *GetServiceAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get service account o k response has a 5xx status code
func (o *GetServiceAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get service account o k response a status code equal to that given
func (o *GetServiceAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get service account o k response
func (o *GetServiceAccountOK) Code() int {
	return 200
}

func (o *GetServiceAccountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/rbac/service-account/{id}][%d] getServiceAccountOK %s", 200, payload)
}

func (o *GetServiceAccountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/rbac/service-account/{id}][%d] getServiceAccountOK %s", 200, payload)
}

func (o *GetServiceAccountOK) GetPayload() *models.ServiceAccountsWithPolicy {
	return o.Payload
}

func (o *GetServiceAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceAccountsWithPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetServiceAccountBadRequest creates a GetServiceAccountBadRequest with default headers values
func NewGetServiceAccountBadRequest() *GetServiceAccountBadRequest {
	return &GetServiceAccountBadRequest{}
}

/*
GetServiceAccountBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type GetServiceAccountBadRequest struct {
	Payload *GetServiceAccountBadRequestBody
}

// IsSuccess returns true when this get service account bad request response has a 2xx status code
func (o *GetServiceAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service account bad request response has a 3xx status code
func (o *GetServiceAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service account bad request response has a 4xx status code
func (o *GetServiceAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service account bad request response has a 5xx status code
func (o *GetServiceAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get service account bad request response a status code equal to that given
func (o *GetServiceAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get service account bad request response
func (o *GetServiceAccountBadRequest) Code() int {
	return 400
}

func (o *GetServiceAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/rbac/service-account/{id}][%d] getServiceAccountBadRequest %s", 400, payload)
}

func (o *GetServiceAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/rbac/service-account/{id}][%d] getServiceAccountBadRequest %s", 400, payload)
}

func (o *GetServiceAccountBadRequest) GetPayload() *GetServiceAccountBadRequestBody {
	return o.Payload
}

func (o *GetServiceAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetServiceAccountBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetServiceAccountInternalServerError creates a GetServiceAccountInternalServerError with default headers values
func NewGetServiceAccountInternalServerError() *GetServiceAccountInternalServerError {
	return &GetServiceAccountInternalServerError{}
}

/*
GetServiceAccountInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type GetServiceAccountInternalServerError struct {
	Payload *GetServiceAccountInternalServerErrorBody
}

// IsSuccess returns true when this get service account internal server error response has a 2xx status code
func (o *GetServiceAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service account internal server error response has a 3xx status code
func (o *GetServiceAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service account internal server error response has a 4xx status code
func (o *GetServiceAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get service account internal server error response has a 5xx status code
func (o *GetServiceAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get service account internal server error response a status code equal to that given
func (o *GetServiceAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get service account internal server error response
func (o *GetServiceAccountInternalServerError) Code() int {
	return 500
}

func (o *GetServiceAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/rbac/service-account/{id}][%d] getServiceAccountInternalServerError %s", 500, payload)
}

func (o *GetServiceAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/rbac/service-account/{id}][%d] getServiceAccountInternalServerError %s", 500, payload)
}

func (o *GetServiceAccountInternalServerError) GetPayload() *GetServiceAccountInternalServerErrorBody {
	return o.Payload
}

func (o *GetServiceAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetServiceAccountInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
GetServiceAccountBadRequestBody get service account bad request body
swagger:model GetServiceAccountBadRequestBody
*/
type GetServiceAccountBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get service account bad request body
func (o *GetServiceAccountBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get service account bad request body based on context it is used
func (o *GetServiceAccountBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetServiceAccountBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetServiceAccountBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetServiceAccountBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetServiceAccountInternalServerErrorBody get service account internal server error body
swagger:model GetServiceAccountInternalServerErrorBody
*/
type GetServiceAccountInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get service account internal server error body
func (o *GetServiceAccountInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get service account internal server error body based on context it is used
func (o *GetServiceAccountInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetServiceAccountInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetServiceAccountInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetServiceAccountInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
