// Code generated by go-swagger; DO NOT EDIT.

package serviceaccounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/groundcover-com/groundcover-sdk-go/pkg/models"
)

// UpdateServiceAccountReader is a Reader for the UpdateServiceAccount structure.
type UpdateServiceAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServiceAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateServiceAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateServiceAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateServiceAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateServiceAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/rbac/service-account/update] updateServiceAccount", response, response.Code())
	}
}

// NewUpdateServiceAccountOK creates a UpdateServiceAccountOK with default headers values
func NewUpdateServiceAccountOK() *UpdateServiceAccountOK {
	return &UpdateServiceAccountOK{}
}

/*
UpdateServiceAccountOK describes a response with status code 200, with default header values.

UpdateServiceAccountResponseWrapper defines the response structure for updating a service account.
*/
type UpdateServiceAccountOK struct {
	Payload *models.UpdateServiceAccountResponse
}

// IsSuccess returns true when this update service account o k response has a 2xx status code
func (o *UpdateServiceAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update service account o k response has a 3xx status code
func (o *UpdateServiceAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service account o k response has a 4xx status code
func (o *UpdateServiceAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update service account o k response has a 5xx status code
func (o *UpdateServiceAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update service account o k response a status code equal to that given
func (o *UpdateServiceAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update service account o k response
func (o *UpdateServiceAccountOK) Code() int {
	return 200
}

func (o *UpdateServiceAccountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/service-account/update][%d] updateServiceAccountOK %s", 200, payload)
}

func (o *UpdateServiceAccountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/service-account/update][%d] updateServiceAccountOK %s", 200, payload)
}

func (o *UpdateServiceAccountOK) GetPayload() *models.UpdateServiceAccountResponse {
	return o.Payload
}

func (o *UpdateServiceAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateServiceAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateServiceAccountBadRequest creates a UpdateServiceAccountBadRequest with default headers values
func NewUpdateServiceAccountBadRequest() *UpdateServiceAccountBadRequest {
	return &UpdateServiceAccountBadRequest{}
}

/*
UpdateServiceAccountBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type UpdateServiceAccountBadRequest struct {
	Payload *UpdateServiceAccountBadRequestBody
}

// IsSuccess returns true when this update service account bad request response has a 2xx status code
func (o *UpdateServiceAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update service account bad request response has a 3xx status code
func (o *UpdateServiceAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service account bad request response has a 4xx status code
func (o *UpdateServiceAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update service account bad request response has a 5xx status code
func (o *UpdateServiceAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update service account bad request response a status code equal to that given
func (o *UpdateServiceAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update service account bad request response
func (o *UpdateServiceAccountBadRequest) Code() int {
	return 400
}

func (o *UpdateServiceAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/service-account/update][%d] updateServiceAccountBadRequest %s", 400, payload)
}

func (o *UpdateServiceAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/service-account/update][%d] updateServiceAccountBadRequest %s", 400, payload)
}

func (o *UpdateServiceAccountBadRequest) GetPayload() *UpdateServiceAccountBadRequestBody {
	return o.Payload
}

func (o *UpdateServiceAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateServiceAccountBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateServiceAccountNotFound creates a UpdateServiceAccountNotFound with default headers values
func NewUpdateServiceAccountNotFound() *UpdateServiceAccountNotFound {
	return &UpdateServiceAccountNotFound{}
}

/*
UpdateServiceAccountNotFound describes a response with status code 404, with default header values.

ErrorResponse defines a common error response structure.
*/
type UpdateServiceAccountNotFound struct {
	Payload *UpdateServiceAccountNotFoundBody
}

// IsSuccess returns true when this update service account not found response has a 2xx status code
func (o *UpdateServiceAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update service account not found response has a 3xx status code
func (o *UpdateServiceAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service account not found response has a 4xx status code
func (o *UpdateServiceAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update service account not found response has a 5xx status code
func (o *UpdateServiceAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update service account not found response a status code equal to that given
func (o *UpdateServiceAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update service account not found response
func (o *UpdateServiceAccountNotFound) Code() int {
	return 404
}

func (o *UpdateServiceAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/service-account/update][%d] updateServiceAccountNotFound %s", 404, payload)
}

func (o *UpdateServiceAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/service-account/update][%d] updateServiceAccountNotFound %s", 404, payload)
}

func (o *UpdateServiceAccountNotFound) GetPayload() *UpdateServiceAccountNotFoundBody {
	return o.Payload
}

func (o *UpdateServiceAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateServiceAccountNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateServiceAccountInternalServerError creates a UpdateServiceAccountInternalServerError with default headers values
func NewUpdateServiceAccountInternalServerError() *UpdateServiceAccountInternalServerError {
	return &UpdateServiceAccountInternalServerError{}
}

/*
UpdateServiceAccountInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type UpdateServiceAccountInternalServerError struct {
	Payload *UpdateServiceAccountInternalServerErrorBody
}

// IsSuccess returns true when this update service account internal server error response has a 2xx status code
func (o *UpdateServiceAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update service account internal server error response has a 3xx status code
func (o *UpdateServiceAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service account internal server error response has a 4xx status code
func (o *UpdateServiceAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update service account internal server error response has a 5xx status code
func (o *UpdateServiceAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update service account internal server error response a status code equal to that given
func (o *UpdateServiceAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update service account internal server error response
func (o *UpdateServiceAccountInternalServerError) Code() int {
	return 500
}

func (o *UpdateServiceAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/service-account/update][%d] updateServiceAccountInternalServerError %s", 500, payload)
}

func (o *UpdateServiceAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/rbac/service-account/update][%d] updateServiceAccountInternalServerError %s", 500, payload)
}

func (o *UpdateServiceAccountInternalServerError) GetPayload() *UpdateServiceAccountInternalServerErrorBody {
	return o.Payload
}

func (o *UpdateServiceAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateServiceAccountInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
UpdateServiceAccountBadRequestBody update service account bad request body
swagger:model UpdateServiceAccountBadRequestBody
*/
type UpdateServiceAccountBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update service account bad request body
func (o *UpdateServiceAccountBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update service account bad request body based on context it is used
func (o *UpdateServiceAccountBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServiceAccountBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServiceAccountBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateServiceAccountBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateServiceAccountInternalServerErrorBody update service account internal server error body
swagger:model UpdateServiceAccountInternalServerErrorBody
*/
type UpdateServiceAccountInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update service account internal server error body
func (o *UpdateServiceAccountInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update service account internal server error body based on context it is used
func (o *UpdateServiceAccountInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServiceAccountInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServiceAccountInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res UpdateServiceAccountInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateServiceAccountNotFoundBody update service account not found body
swagger:model UpdateServiceAccountNotFoundBody
*/
type UpdateServiceAccountNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update service account not found body
func (o *UpdateServiceAccountNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update service account not found body based on context it is used
func (o *UpdateServiceAccountNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServiceAccountNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServiceAccountNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateServiceAccountNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
