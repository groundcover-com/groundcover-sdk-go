// Code generated by go-swagger; DO NOT EDIT.

package ingestionkeys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeleteIngestionKeyReader is a Reader for the DeleteIngestionKey structure.
type DeleteIngestionKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteIngestionKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewDeleteIngestionKeyAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteIngestionKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteIngestionKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteIngestionKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /api/rbac/ingestion-keys/delete] deleteIngestionKey", response, response.Code())
	}
}

// NewDeleteIngestionKeyAccepted creates a DeleteIngestionKeyAccepted with default headers values
func NewDeleteIngestionKeyAccepted() *DeleteIngestionKeyAccepted {
	return &DeleteIngestionKeyAccepted{}
}

/*
DeleteIngestionKeyAccepted describes a response with status code 202, with default header values.

NoContentResponse indicates success but that no response body is expected or included.
*/
type DeleteIngestionKeyAccepted struct {
}

// IsSuccess returns true when this delete ingestion key accepted response has a 2xx status code
func (o *DeleteIngestionKeyAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete ingestion key accepted response has a 3xx status code
func (o *DeleteIngestionKeyAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete ingestion key accepted response has a 4xx status code
func (o *DeleteIngestionKeyAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete ingestion key accepted response has a 5xx status code
func (o *DeleteIngestionKeyAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this delete ingestion key accepted response a status code equal to that given
func (o *DeleteIngestionKeyAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the delete ingestion key accepted response
func (o *DeleteIngestionKeyAccepted) Code() int {
	return 202
}

func (o *DeleteIngestionKeyAccepted) Error() string {
	return fmt.Sprintf("[DELETE /api/rbac/ingestion-keys/delete][%d] deleteIngestionKeyAccepted", 202)
}

func (o *DeleteIngestionKeyAccepted) String() string {
	return fmt.Sprintf("[DELETE /api/rbac/ingestion-keys/delete][%d] deleteIngestionKeyAccepted", 202)
}

func (o *DeleteIngestionKeyAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteIngestionKeyBadRequest creates a DeleteIngestionKeyBadRequest with default headers values
func NewDeleteIngestionKeyBadRequest() *DeleteIngestionKeyBadRequest {
	return &DeleteIngestionKeyBadRequest{}
}

/*
DeleteIngestionKeyBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type DeleteIngestionKeyBadRequest struct {
	Payload *DeleteIngestionKeyBadRequestBody
}

// IsSuccess returns true when this delete ingestion key bad request response has a 2xx status code
func (o *DeleteIngestionKeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete ingestion key bad request response has a 3xx status code
func (o *DeleteIngestionKeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete ingestion key bad request response has a 4xx status code
func (o *DeleteIngestionKeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete ingestion key bad request response has a 5xx status code
func (o *DeleteIngestionKeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete ingestion key bad request response a status code equal to that given
func (o *DeleteIngestionKeyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete ingestion key bad request response
func (o *DeleteIngestionKeyBadRequest) Code() int {
	return 400
}

func (o *DeleteIngestionKeyBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/rbac/ingestion-keys/delete][%d] deleteIngestionKeyBadRequest %s", 400, payload)
}

func (o *DeleteIngestionKeyBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/rbac/ingestion-keys/delete][%d] deleteIngestionKeyBadRequest %s", 400, payload)
}

func (o *DeleteIngestionKeyBadRequest) GetPayload() *DeleteIngestionKeyBadRequestBody {
	return o.Payload
}

func (o *DeleteIngestionKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteIngestionKeyBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIngestionKeyNotFound creates a DeleteIngestionKeyNotFound with default headers values
func NewDeleteIngestionKeyNotFound() *DeleteIngestionKeyNotFound {
	return &DeleteIngestionKeyNotFound{}
}

/*
DeleteIngestionKeyNotFound describes a response with status code 404, with default header values.

ErrorResponse defines a common error response structure.
*/
type DeleteIngestionKeyNotFound struct {
	Payload *DeleteIngestionKeyNotFoundBody
}

// IsSuccess returns true when this delete ingestion key not found response has a 2xx status code
func (o *DeleteIngestionKeyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete ingestion key not found response has a 3xx status code
func (o *DeleteIngestionKeyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete ingestion key not found response has a 4xx status code
func (o *DeleteIngestionKeyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete ingestion key not found response has a 5xx status code
func (o *DeleteIngestionKeyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete ingestion key not found response a status code equal to that given
func (o *DeleteIngestionKeyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete ingestion key not found response
func (o *DeleteIngestionKeyNotFound) Code() int {
	return 404
}

func (o *DeleteIngestionKeyNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/rbac/ingestion-keys/delete][%d] deleteIngestionKeyNotFound %s", 404, payload)
}

func (o *DeleteIngestionKeyNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/rbac/ingestion-keys/delete][%d] deleteIngestionKeyNotFound %s", 404, payload)
}

func (o *DeleteIngestionKeyNotFound) GetPayload() *DeleteIngestionKeyNotFoundBody {
	return o.Payload
}

func (o *DeleteIngestionKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteIngestionKeyNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIngestionKeyInternalServerError creates a DeleteIngestionKeyInternalServerError with default headers values
func NewDeleteIngestionKeyInternalServerError() *DeleteIngestionKeyInternalServerError {
	return &DeleteIngestionKeyInternalServerError{}
}

/*
DeleteIngestionKeyInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type DeleteIngestionKeyInternalServerError struct {
	Payload *DeleteIngestionKeyInternalServerErrorBody
}

// IsSuccess returns true when this delete ingestion key internal server error response has a 2xx status code
func (o *DeleteIngestionKeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete ingestion key internal server error response has a 3xx status code
func (o *DeleteIngestionKeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete ingestion key internal server error response has a 4xx status code
func (o *DeleteIngestionKeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete ingestion key internal server error response has a 5xx status code
func (o *DeleteIngestionKeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete ingestion key internal server error response a status code equal to that given
func (o *DeleteIngestionKeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete ingestion key internal server error response
func (o *DeleteIngestionKeyInternalServerError) Code() int {
	return 500
}

func (o *DeleteIngestionKeyInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/rbac/ingestion-keys/delete][%d] deleteIngestionKeyInternalServerError %s", 500, payload)
}

func (o *DeleteIngestionKeyInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/rbac/ingestion-keys/delete][%d] deleteIngestionKeyInternalServerError %s", 500, payload)
}

func (o *DeleteIngestionKeyInternalServerError) GetPayload() *DeleteIngestionKeyInternalServerErrorBody {
	return o.Payload
}

func (o *DeleteIngestionKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteIngestionKeyInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DeleteIngestionKeyBadRequestBody delete ingestion key bad request body
swagger:model DeleteIngestionKeyBadRequestBody
*/
type DeleteIngestionKeyBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete ingestion key bad request body
func (o *DeleteIngestionKeyBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete ingestion key bad request body based on context it is used
func (o *DeleteIngestionKeyBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteIngestionKeyBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteIngestionKeyBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteIngestionKeyBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteIngestionKeyInternalServerErrorBody delete ingestion key internal server error body
swagger:model DeleteIngestionKeyInternalServerErrorBody
*/
type DeleteIngestionKeyInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete ingestion key internal server error body
func (o *DeleteIngestionKeyInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete ingestion key internal server error body based on context it is used
func (o *DeleteIngestionKeyInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteIngestionKeyInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteIngestionKeyInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DeleteIngestionKeyInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteIngestionKeyNotFoundBody delete ingestion key not found body
swagger:model DeleteIngestionKeyNotFoundBody
*/
type DeleteIngestionKeyNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete ingestion key not found body
func (o *DeleteIngestionKeyNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete ingestion key not found body based on context it is used
func (o *DeleteIngestionKeyNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteIngestionKeyNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteIngestionKeyNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteIngestionKeyNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
