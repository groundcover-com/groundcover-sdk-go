// Code generated by go-swagger; DO NOT EDIT.

package ingestionkeys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/groundcover-com/groundcover-sdk-go/pkg/models"
)

// CreateIngestionKeyReader is a Reader for the CreateIngestionKey structure.
type CreateIngestionKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateIngestionKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 201:
		result := NewCreateIngestionKeyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateIngestionKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateIngestionKeyConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateIngestionKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/rbac/ingestion-keys/create] createIngestionKey", response, response.Code())
	}
}

// NewCreateIngestionKeyCreated creates a CreateIngestionKeyCreated with default headers values
func NewCreateIngestionKeyCreated() *CreateIngestionKeyCreated {
	return &CreateIngestionKeyCreated{}
}

/*
CreateIngestionKeyCreated describes a response with status code 201, with default header values.

CreateIngestionKeyCreated create ingestion key created
*/
type CreateIngestionKeyCreated struct {
	Payload *models.IngestionKeyResult
}

// IsSuccess returns true when this create ingestion key created response has a 2xx status code
func (o *CreateIngestionKeyCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create ingestion key created response has a 3xx status code
func (o *CreateIngestionKeyCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create ingestion key created response has a 4xx status code
func (o *CreateIngestionKeyCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create ingestion key created response has a 5xx status code
func (o *CreateIngestionKeyCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create ingestion key created response a status code equal to that given
func (o *CreateIngestionKeyCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create ingestion key created response
func (o *CreateIngestionKeyCreated) Code() int {
	return 201
}

func (o *CreateIngestionKeyCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/rbac/ingestion-keys/create][%d] createIngestionKeyCreated %s", 201, payload)
}

func (o *CreateIngestionKeyCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/rbac/ingestion-keys/create][%d] createIngestionKeyCreated %s", 201, payload)
}

func (o *CreateIngestionKeyCreated) GetPayload() *models.IngestionKeyResult {
	return o.Payload
}

func (o *CreateIngestionKeyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IngestionKeyResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewCreateIngestionKeyBadRequest creates a CreateIngestionKeyBadRequest with default headers values
func NewCreateIngestionKeyBadRequest() *CreateIngestionKeyBadRequest {
	return &CreateIngestionKeyBadRequest{}
}

/*
CreateIngestionKeyBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type CreateIngestionKeyBadRequest struct {
	Payload *CreateIngestionKeyBadRequestBody
}

// IsSuccess returns true when this create ingestion key bad request response has a 2xx status code
func (o *CreateIngestionKeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create ingestion key bad request response has a 3xx status code
func (o *CreateIngestionKeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create ingestion key bad request response has a 4xx status code
func (o *CreateIngestionKeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create ingestion key bad request response has a 5xx status code
func (o *CreateIngestionKeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create ingestion key bad request response a status code equal to that given
func (o *CreateIngestionKeyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create ingestion key bad request response
func (o *CreateIngestionKeyBadRequest) Code() int {
	return 400
}

func (o *CreateIngestionKeyBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/rbac/ingestion-keys/create][%d] createIngestionKeyBadRequest %s", 400, payload)
}

func (o *CreateIngestionKeyBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/rbac/ingestion-keys/create][%d] createIngestionKeyBadRequest %s", 400, payload)
}

func (o *CreateIngestionKeyBadRequest) GetPayload() *CreateIngestionKeyBadRequestBody {
	return o.Payload
}

func (o *CreateIngestionKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateIngestionKeyBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewCreateIngestionKeyConflict creates a CreateIngestionKeyConflict with default headers values
func NewCreateIngestionKeyConflict() *CreateIngestionKeyConflict {
	return &CreateIngestionKeyConflict{}
}

/*
CreateIngestionKeyConflict describes a response with status code 409, with default header values.

ErrorResponse defines a common error response structure.
*/
type CreateIngestionKeyConflict struct {
	Payload *CreateIngestionKeyConflictBody
}

// IsSuccess returns true when this create ingestion key conflict response has a 2xx status code
func (o *CreateIngestionKeyConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create ingestion key conflict response has a 3xx status code
func (o *CreateIngestionKeyConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create ingestion key conflict response has a 4xx status code
func (o *CreateIngestionKeyConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create ingestion key conflict response has a 5xx status code
func (o *CreateIngestionKeyConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create ingestion key conflict response a status code equal to that given
func (o *CreateIngestionKeyConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create ingestion key conflict response
func (o *CreateIngestionKeyConflict) Code() int {
	return 409
}

func (o *CreateIngestionKeyConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/rbac/ingestion-keys/create][%d] createIngestionKeyConflict %s", 409, payload)
}

func (o *CreateIngestionKeyConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/rbac/ingestion-keys/create][%d] createIngestionKeyConflict %s", 409, payload)
}

func (o *CreateIngestionKeyConflict) GetPayload() *CreateIngestionKeyConflictBody {
	return o.Payload
}

func (o *CreateIngestionKeyConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateIngestionKeyConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewCreateIngestionKeyInternalServerError creates a CreateIngestionKeyInternalServerError with default headers values
func NewCreateIngestionKeyInternalServerError() *CreateIngestionKeyInternalServerError {
	return &CreateIngestionKeyInternalServerError{}
}

/*
CreateIngestionKeyInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type CreateIngestionKeyInternalServerError struct {
	Payload *CreateIngestionKeyInternalServerErrorBody
}

// IsSuccess returns true when this create ingestion key internal server error response has a 2xx status code
func (o *CreateIngestionKeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create ingestion key internal server error response has a 3xx status code
func (o *CreateIngestionKeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create ingestion key internal server error response has a 4xx status code
func (o *CreateIngestionKeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create ingestion key internal server error response has a 5xx status code
func (o *CreateIngestionKeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create ingestion key internal server error response a status code equal to that given
func (o *CreateIngestionKeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create ingestion key internal server error response
func (o *CreateIngestionKeyInternalServerError) Code() int {
	return 500
}

func (o *CreateIngestionKeyInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/rbac/ingestion-keys/create][%d] createIngestionKeyInternalServerError %s", 500, payload)
}

func (o *CreateIngestionKeyInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/rbac/ingestion-keys/create][%d] createIngestionKeyInternalServerError %s", 500, payload)
}

func (o *CreateIngestionKeyInternalServerError) GetPayload() *CreateIngestionKeyInternalServerErrorBody {
	return o.Payload
}

func (o *CreateIngestionKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateIngestionKeyInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
CreateIngestionKeyBadRequestBody create ingestion key bad request body
swagger:model CreateIngestionKeyBadRequestBody
*/
type CreateIngestionKeyBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this create ingestion key bad request body
func (o *CreateIngestionKeyBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create ingestion key bad request body based on context it is used
func (o *CreateIngestionKeyBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateIngestionKeyBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateIngestionKeyBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateIngestionKeyBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateIngestionKeyConflictBody create ingestion key conflict body
swagger:model CreateIngestionKeyConflictBody
*/
type CreateIngestionKeyConflictBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this create ingestion key conflict body
func (o *CreateIngestionKeyConflictBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create ingestion key conflict body based on context it is used
func (o *CreateIngestionKeyConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateIngestionKeyConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateIngestionKeyConflictBody) UnmarshalBinary(b []byte) error {
	var res CreateIngestionKeyConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateIngestionKeyInternalServerErrorBody create ingestion key internal server error body
swagger:model CreateIngestionKeyInternalServerErrorBody
*/
type CreateIngestionKeyInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this create ingestion key internal server error body
func (o *CreateIngestionKeyInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create ingestion key internal server error body based on context it is used
func (o *CreateIngestionKeyInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateIngestionKeyInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateIngestionKeyInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res CreateIngestionKeyInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
