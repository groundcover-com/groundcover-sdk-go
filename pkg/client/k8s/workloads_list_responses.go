// Code generated by go-swagger; DO NOT EDIT.

package k8s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/groundcover-com/groundcover-sdk-go/pkg/models"
)

// WorkloadsListReader is a Reader for the WorkloadsList structure.
type WorkloadsListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WorkloadsListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWorkloadsListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewWorkloadsListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewWorkloadsListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/k8s/v3/workloads/list] workloadsList", response, response.Code())
	}
}

// NewWorkloadsListOK creates a WorkloadsListOK with default headers values
func NewWorkloadsListOK() *WorkloadsListOK {
	return &WorkloadsListOK{}
}

/*
WorkloadsListOK describes a response with status code 200, with default header values.

WorkloadsListOK workloads list o k
*/
type WorkloadsListOK struct {
	Payload *models.WorkloadsListResponse
}

// IsSuccess returns true when this workloads list o k response has a 2xx status code
func (o *WorkloadsListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this workloads list o k response has a 3xx status code
func (o *WorkloadsListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workloads list o k response has a 4xx status code
func (o *WorkloadsListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this workloads list o k response has a 5xx status code
func (o *WorkloadsListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this workloads list o k response a status code equal to that given
func (o *WorkloadsListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the workloads list o k response
func (o *WorkloadsListOK) Code() int {
	return 200
}

func (o *WorkloadsListOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/k8s/v3/workloads/list][%d] workloadsListOK %s", 200, payload)
}

func (o *WorkloadsListOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/k8s/v3/workloads/list][%d] workloadsListOK %s", 200, payload)
}

func (o *WorkloadsListOK) GetPayload() *models.WorkloadsListResponse {
	return o.Payload
}

func (o *WorkloadsListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WorkloadsListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkloadsListBadRequest creates a WorkloadsListBadRequest with default headers values
func NewWorkloadsListBadRequest() *WorkloadsListBadRequest {
	return &WorkloadsListBadRequest{}
}

/*
WorkloadsListBadRequest describes a response with status code 400, with default header values.

ErrorResponse defines a common error response structure.
*/
type WorkloadsListBadRequest struct {
	Payload *WorkloadsListBadRequestBody
}

// IsSuccess returns true when this workloads list bad request response has a 2xx status code
func (o *WorkloadsListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workloads list bad request response has a 3xx status code
func (o *WorkloadsListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workloads list bad request response has a 4xx status code
func (o *WorkloadsListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this workloads list bad request response has a 5xx status code
func (o *WorkloadsListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this workloads list bad request response a status code equal to that given
func (o *WorkloadsListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the workloads list bad request response
func (o *WorkloadsListBadRequest) Code() int {
	return 400
}

func (o *WorkloadsListBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/k8s/v3/workloads/list][%d] workloadsListBadRequest %s", 400, payload)
}

func (o *WorkloadsListBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/k8s/v3/workloads/list][%d] workloadsListBadRequest %s", 400, payload)
}

func (o *WorkloadsListBadRequest) GetPayload() *WorkloadsListBadRequestBody {
	return o.Payload
}

func (o *WorkloadsListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(WorkloadsListBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkloadsListInternalServerError creates a WorkloadsListInternalServerError with default headers values
func NewWorkloadsListInternalServerError() *WorkloadsListInternalServerError {
	return &WorkloadsListInternalServerError{}
}

/*
WorkloadsListInternalServerError describes a response with status code 500, with default header values.

ErrorResponse defines a common error response structure.
*/
type WorkloadsListInternalServerError struct {
	Payload *WorkloadsListInternalServerErrorBody
}

// IsSuccess returns true when this workloads list internal server error response has a 2xx status code
func (o *WorkloadsListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workloads list internal server error response has a 3xx status code
func (o *WorkloadsListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workloads list internal server error response has a 4xx status code
func (o *WorkloadsListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this workloads list internal server error response has a 5xx status code
func (o *WorkloadsListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this workloads list internal server error response a status code equal to that given
func (o *WorkloadsListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the workloads list internal server error response
func (o *WorkloadsListInternalServerError) Code() int {
	return 500
}

func (o *WorkloadsListInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/k8s/v3/workloads/list][%d] workloadsListInternalServerError %s", 500, payload)
}

func (o *WorkloadsListInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/k8s/v3/workloads/list][%d] workloadsListInternalServerError %s", 500, payload)
}

func (o *WorkloadsListInternalServerError) GetPayload() *WorkloadsListInternalServerErrorBody {
	return o.Payload
}

func (o *WorkloadsListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(WorkloadsListInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
WorkloadsListBadRequestBody workloads list bad request body
swagger:model WorkloadsListBadRequestBody
*/
type WorkloadsListBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this workloads list bad request body
func (o *WorkloadsListBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this workloads list bad request body based on context it is used
func (o *WorkloadsListBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *WorkloadsListBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WorkloadsListBadRequestBody) UnmarshalBinary(b []byte) error {
	var res WorkloadsListBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
WorkloadsListInternalServerErrorBody workloads list internal server error body
swagger:model WorkloadsListInternalServerErrorBody
*/
type WorkloadsListInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this workloads list internal server error body
func (o *WorkloadsListInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this workloads list internal server error body based on context it is used
func (o *WorkloadsListInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *WorkloadsListInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WorkloadsListInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res WorkloadsListInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
