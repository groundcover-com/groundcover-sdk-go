// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new integrations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new integrations API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new integrations API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for integrations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDataIntegrationConfig(params *CreateDataIntegrationConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataIntegrationConfigCreated, error)

	DeleteDataIntegrationConfig(params *DeleteDataIntegrationConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataIntegrationConfigOK, error)

	DescribeDataIntegrationConfig(params *DescribeDataIntegrationConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDataIntegrationConfigOK, error)

	GetDataIntegrationConfig(params *GetDataIntegrationConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataIntegrationConfigOK, error)

	GetDataIntegrationConfigs(params *GetDataIntegrationConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataIntegrationConfigsOK, *GetDataIntegrationConfigsNoContent, error)

	GetDataIntegrationConfigsByType(params *GetDataIntegrationConfigsByTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataIntegrationConfigsByTypeOK, *GetDataIntegrationConfigsByTypeNoContent, error)

	UpdateDataIntegrationConfig(params *UpdateDataIntegrationConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDataIntegrationConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateDataIntegrationConfig @Accept json

@Produce json
@Param type path string true "Data Integration type"
@Param request body createDataIntegrationConfigRequestParams true "Request body"
@Success 201 {object} DataIntegrationConfigResponseWrapper
@Failure 400 {object} DataIntegrationConfigErrorResponseWrapper
@Failure 500 {object} DataIntegrationConfigErrorResponseWrapper
@Failure 503 {object} DataIntegrationConfigErrorResponseWrapper
@Router /api/integrations/v1/data/config/{type} [POST]
*/
func (a *Client) CreateDataIntegrationConfig(params *CreateDataIntegrationConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataIntegrationConfigCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDataIntegrationConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDataIntegrationConfig",
		Method:             "POST",
		PathPattern:        "/api/integrations/v1/data/config/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDataIntegrationConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDataIntegrationConfigCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDataIntegrationConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteDataIntegrationConfig @Accept json

@Produce json
@Param type path string true "Data Integration type"
@Param id path string true "Data Integration ID"
@Param env query string false "Environment name"
@Param cluster query string false "Cluster name"
@Param instance query string false "Instance name"
@Success 200 {object} EmptyDataIntegrationConfigResponseWrapper
@Failure 400 {object} DataIntegrationConfigErrorResponseWrapper
@Failure 404 {object} DataIntegrationConfigErrorResponseWrapper
@Failure 500 {object} DataIntegrationConfigErrorResponseWrapper
@Failure 503 {object} DataIntegrationConfigErrorResponseWrapper
@Router /api/integrations/v1/data/config/{type}/{id} [DELETE]
*/
func (a *Client) DeleteDataIntegrationConfig(params *DeleteDataIntegrationConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataIntegrationConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDataIntegrationConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDataIntegrationConfig",
		Method:             "DELETE",
		PathPattern:        "/api/integrations/v1/data/config/{type}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDataIntegrationConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDataIntegrationConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDataIntegrationConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DescribeDataIntegrationConfig returns the configuration schema defaults and available options for a specific data integration type

This endpoint is useful for understanding what configuration options are available for a given integration type.
*/
func (a *Client) DescribeDataIntegrationConfig(params *DescribeDataIntegrationConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeDataIntegrationConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeDataIntegrationConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeDataIntegrationConfig",
		Method:             "GET",
		PathPattern:        "/api/integrations/v1/data/describe/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeDataIntegrationConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeDataIntegrationConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeDataIntegrationConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDataIntegrationConfig @Accept json

@Produce json
@Param type path string true "Data Integration type"
@Param id path string true "Data Integration ID"
@Param includeArchived query bool false "Include archived (deleted) configurations"
@Success 200 {object} DataIntegrationConfigResponseWrapper
@Failure 400 {object} DataIntegrationConfigErrorResponseWrapper
@Failure 404 {object} DataIntegrationConfigErrorResponseWrapper
@Failure 500 {object} DataIntegrationConfigErrorResponseWrapper
@Failure 503 {object} DataIntegrationConfigErrorResponseWrapper
@Router /api/integrations/v1/data/config/{type}/{id} [GET]
*/
func (a *Client) GetDataIntegrationConfig(params *GetDataIntegrationConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataIntegrationConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataIntegrationConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDataIntegrationConfig",
		Method:             "GET",
		PathPattern:        "/api/integrations/v1/data/config/{type}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataIntegrationConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataIntegrationConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDataIntegrationConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDataIntegrationConfigs @Accept json

@Produce json
@Param includeArchived query bool false "Include archived (deleted) configurations"
@Success 200 {object} DataIntegrationConfigsResponseWrapper
@Success 204 {object} EmptyDataIntegrationConfigResponseWrapper
@Failure 400 {object} DataIntegrationConfigErrorResponseWrapper
@Failure 500 {object} DataIntegrationConfigErrorResponseWrapper
@Failure 503 {object} DataIntegrationConfigErrorResponseWrapper
@Router /api/integrations/v1/data/config [GET]
*/
func (a *Client) GetDataIntegrationConfigs(params *GetDataIntegrationConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataIntegrationConfigsOK, *GetDataIntegrationConfigsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataIntegrationConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDataIntegrationConfigs",
		Method:             "GET",
		PathPattern:        "/api/integrations/v1/data/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataIntegrationConfigsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetDataIntegrationConfigsOK:
		return value, nil, nil
	case *GetDataIntegrationConfigsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for integrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDataIntegrationConfigsByType @Accept json

@Produce json
@Param type path string true "Data Integration type"
@Param includeArchived query bool false "Include archived (deleted) configurations"
@Success 200 {object} DataIntegrationConfigsResponseWrapper
@Success 204 {object} EmptyDataIntegrationConfigResponseWrapper
@Failure 400 {object} DataIntegrationConfigErrorResponseWrapper
@Failure 500 {object} DataIntegrationConfigErrorResponseWrapper
@Failure 503 {object} DataIntegrationConfigErrorResponseWrapper
@Router /api/integrations/v1/data/config/{type} [GET]
*/
func (a *Client) GetDataIntegrationConfigsByType(params *GetDataIntegrationConfigsByTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataIntegrationConfigsByTypeOK, *GetDataIntegrationConfigsByTypeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataIntegrationConfigsByTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDataIntegrationConfigsByType",
		Method:             "GET",
		PathPattern:        "/api/integrations/v1/data/config/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataIntegrationConfigsByTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetDataIntegrationConfigsByTypeOK:
		return value, nil, nil
	case *GetDataIntegrationConfigsByTypeNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for integrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateDataIntegrationConfig @Accept json

@Produce json
@Param type path string true "Data Integration type"
@Param id path string true "Data Integration ID"
@Param request body updateDataIntegrationConfigRequestParams true "Request body"
@Success 200 {object} DataIntegrationConfigResponseWrapper
@Failure 400 {object} DataIntegrationConfigErrorResponseWrapper
@Failure 404 {object} DataIntegrationConfigErrorResponseWrapper
@Failure 500 {object} DataIntegrationConfigErrorResponseWrapper
@Failure 503 {object} DataIntegrationConfigErrorResponseWrapper
@Router /api/integrations/v1/data/config/{type}/{id} [PUT]
*/
func (a *Client) UpdateDataIntegrationConfig(params *UpdateDataIntegrationConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDataIntegrationConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDataIntegrationConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDataIntegrationConfig",
		Method:             "PUT",
		PathPattern:        "/api/integrations/v1/data/config/{type}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDataIntegrationConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDataIntegrationConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDataIntegrationConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
