// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchOrderBy SearchOrderBy defines the order for a search pipeline.
//
// swagger:model SearchOrderBy
type SearchOrderBy struct {

	// direction
	Direction string `json:"direction,omitempty" yaml:"direction,omitempty"`

	// selector
	Selector *Selector `json:"selector,omitempty" yaml:"selector,omitempty"`
}

// Validate validates this search order by
func (m *SearchOrderBy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchOrderBy) validateSelector(formats strfmt.Registry) error {
	if swag.IsZero(m.Selector) { // not required
		return nil
	}

	if m.Selector != nil {
		if err := m.Selector.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("selector")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("selector")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this search order by based on the context it is used
func (m *SearchOrderBy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchOrderBy) contextValidateSelector(ctx context.Context, formats strfmt.Registry) error {

	if m.Selector != nil {

		if swag.IsZero(m.Selector) { // not required
			return nil
		}

		if err := m.Selector.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("selector")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("selector")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchOrderBy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchOrderBy) UnmarshalBinary(b []byte) error {
	var res SearchOrderBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
