// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// View view
//
// swagger:model View
type View struct {

	// archived timestamp
	// Format: date-time
	ArchivedTimestamp strfmt.DateTime `json:"archivedTimestamp,omitempty"`

	// created timestamp
	// Format: date-time
	CreatedTimestamp strfmt.DateTime `json:"createdTimestamp,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// is provisioned
	IsProvisioned bool `json:"isProvisioned,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owner
	Owner string `json:"owner,omitempty"`

	// preset
	Preset string `json:"preset,omitempty"`

	// revision number
	RevisionNumber int32 `json:"revisionNumber,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// team
	Team string `json:"team,omitempty"`

	// tenant UUID
	TenantUUID string `json:"tenantUuid,omitempty"`

	// type
	Type string `json:"viewType,omitempty"`

	// UUID
	UUID string `json:"uuid,omitempty"`

	// updated by
	UpdatedBy string `json:"updatedBy,omitempty"`

	// updated timestamp
	// Format: date-time
	UpdatedTimestamp strfmt.DateTime `json:"updatedTimestamp,omitempty"`
}

// Validate validates this view
func (m *View) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchivedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *View) validateArchivedTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivedTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("archivedTimestamp", "body", "date-time", m.ArchivedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *View) validateCreatedTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("createdTimestamp", "body", "date-time", m.CreatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *View) validateUpdatedTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedTimestamp", "body", "date-time", m.UpdatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this view based on context it is used
func (m *View) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *View) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *View) UnmarshalBinary(b []byte) error {
	var res View
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
