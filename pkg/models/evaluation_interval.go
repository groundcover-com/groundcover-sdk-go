// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
"context"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EvaluationInterval EvaluationInterval defines the evaluation frequency and pending duration.
//
// swagger:model EvaluationInterval
type EvaluationInterval struct {

	// interval
	// Format: duration
	Interval strfmt.Duration `json:"interval,omitempty" yaml:"interval,omitempty"`

	// pending for
	// Format: duration
	PendingFor *Duration `json:"pendingFor,omitempty" yaml:"pendingFor,omitempty"`
}

// Validate validates this evaluation interval
func (m *EvaluationInterval) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingFor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationInterval) validateInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.Interval) { // not required
		return nil
	}

	if err := validate.FormatOf("interval", "body", "duration", m.Interval.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationInterval) validatePendingFor(formats strfmt.Registry) error {
	if swag.IsZero(m.PendingFor) { // not required
		return nil
	}

		durationStr := time.Duration(*m.PendingFor).String()
	if err := validate.FormatOf("pendingFor", "body", "duration", durationStr, formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this evaluation interval based on context it is used
func (m *EvaluationInterval) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EvaluationInterval) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvaluationInterval) UnmarshalBinary(b []byte) error {
	var res EvaluationInterval
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
