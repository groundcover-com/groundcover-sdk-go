// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiscoveryRequest discovery request
//
// swagger:model DiscoveryRequest
type DiscoveryRequest struct {

	// Conditions specifies additional conditions to filter the discovery results.
	Conditions []*Condition `json:"conditions"`

	// Filter specifies a search filter to apply to the discovery results.
	Filter string `json:"filter,omitempty"`

	// Limit specifies the maximum number of results to return.
	// Required: true
	Limit *uint32 `json:"limit"`

	// Sources specifies the sources to filter the discovery results.
	Sources []*Condition `json:"sources"`

	// Type specifies the type of discovery to perform.
	// Required: true
	// Enum: ["logs"," traces"," events"]
	Type *string `json:"type"`

	// filter group
	FilterGroup *Group `json:"filterGroup,omitempty"`
}

// Validate validates this discovery request
func (m *DiscoveryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiscoveryRequest) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *DiscoveryRequest) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	return nil
}

func (m *DiscoveryRequest) validateSources(formats strfmt.Registry) error {
	if swag.IsZero(m.Sources) { // not required
		return nil
	}

	for i := 0; i < len(m.Sources); i++ {
		if swag.IsZero(m.Sources[i]) { // not required
			continue
		}

		if m.Sources[i] != nil {
			if err := m.Sources[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("sources" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("sources" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

var discoveryRequestTypeTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["logs"," traces"," events"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		discoveryRequestTypeTypePropEnum = append(discoveryRequestTypeTypePropEnum, v)
	}
}

const (

	// DiscoveryRequestTypeLogs captures enum value "logs"
	DiscoveryRequestTypeLogs string = "logs"

	// DiscoveryRequestTypeTraces captures enum value " traces"
	DiscoveryRequestTypeTraces string = " traces"

	// DiscoveryRequestTypeEvents captures enum value " events"
	DiscoveryRequestTypeEvents string = " events"
)

// prop value enum
func (m *DiscoveryRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, discoveryRequestTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DiscoveryRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *DiscoveryRequest) validateFilterGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.FilterGroup) { // not required
		return nil
	}

	if m.FilterGroup != nil {
		if err := m.FilterGroup.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("filterGroup")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("filterGroup")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this discovery request based on the context it is used
func (m *DiscoveryRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilterGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiscoveryRequest) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {

			if swag.IsZero(m.Conditions[i]) { // not required
				return nil
			}

			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *DiscoveryRequest) contextValidateSources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Sources); i++ {

		if m.Sources[i] != nil {

			if swag.IsZero(m.Sources[i]) { // not required
				return nil
			}

			if err := m.Sources[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("sources" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("sources" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *DiscoveryRequest) contextValidateFilterGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.FilterGroup != nil {

		if swag.IsZero(m.FilterGroup) { // not required
			return nil
		}

		if err := m.FilterGroup.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("filterGroup")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("filterGroup")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiscoveryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiscoveryRequest) UnmarshalBinary(b []byte) error {
	var res DiscoveryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
