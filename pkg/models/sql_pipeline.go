// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SQLPipeline SqlPipeline defines a pipeline for search queries.
//
// swagger:model SqlPipeline
type SQLPipeline struct {

	// except
	Except []*Selector `json:"except"`

	// group by
	GroupBy []*Selector `json:"groupBy"`

	// limit
	Limit uint64 `json:"limit,omitempty"`

	// offset
	Offset uint64 `json:"offset,omitempty"`

	// order by
	OrderBy []*SearchOrderBy `json:"orderBy"`

	// selectors
	Selectors []*Selector `json:"selectors"`

	// filters
	Filters *Group `json:"filters,omitempty"`

	// from
	From *SQLPipeline `json:"from,omitempty"`

	// having
	Having *Group `json:"having,omitempty"`
}

// Validate validates this Sql pipeline
func (m *SQLPipeline) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExcept(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHaving(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SQLPipeline) validateExcept(formats strfmt.Registry) error {
	if swag.IsZero(m.Except) { // not required
		return nil
	}

	for i := 0; i < len(m.Except); i++ {
		if swag.IsZero(m.Except[i]) { // not required
			continue
		}

		if m.Except[i] != nil {
			if err := m.Except[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("except" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("except" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SQLPipeline) validateGroupBy(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupBy) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupBy); i++ {
		if swag.IsZero(m.GroupBy[i]) { // not required
			continue
		}

		if m.GroupBy[i] != nil {
			if err := m.GroupBy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groupBy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groupBy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SQLPipeline) validateOrderBy(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderBy) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderBy); i++ {
		if swag.IsZero(m.OrderBy[i]) { // not required
			continue
		}

		if m.OrderBy[i] != nil {
			if err := m.OrderBy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderBy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orderBy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SQLPipeline) validateSelectors(formats strfmt.Registry) error {
	if swag.IsZero(m.Selectors) { // not required
		return nil
	}

	for i := 0; i < len(m.Selectors); i++ {
		if swag.IsZero(m.Selectors[i]) { // not required
			continue
		}

		if m.Selectors[i] != nil {
			if err := m.Selectors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("selectors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("selectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SQLPipeline) validateFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.Filters) { // not required
		return nil
	}

	if m.Filters != nil {
		if err := m.Filters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filters")
			}
			return err
		}
	}

	return nil
}

func (m *SQLPipeline) validateFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.From) { // not required
		return nil
	}

	if m.From != nil {
		if err := m.From.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *SQLPipeline) validateHaving(formats strfmt.Registry) error {
	if swag.IsZero(m.Having) { // not required
		return nil
	}

	if m.Having != nil {
		if err := m.Having.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("having")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("having")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Sql pipeline based on the context it is used
func (m *SQLPipeline) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExcept(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroupBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelectors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHaving(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SQLPipeline) contextValidateExcept(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Except); i++ {

		if m.Except[i] != nil {

			if swag.IsZero(m.Except[i]) { // not required
				return nil
			}

			if err := m.Except[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("except" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("except" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SQLPipeline) contextValidateGroupBy(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GroupBy); i++ {

		if m.GroupBy[i] != nil {

			if swag.IsZero(m.GroupBy[i]) { // not required
				return nil
			}

			if err := m.GroupBy[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groupBy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groupBy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SQLPipeline) contextValidateOrderBy(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OrderBy); i++ {

		if m.OrderBy[i] != nil {

			if swag.IsZero(m.OrderBy[i]) { // not required
				return nil
			}

			if err := m.OrderBy[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderBy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orderBy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SQLPipeline) contextValidateSelectors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Selectors); i++ {

		if m.Selectors[i] != nil {

			if swag.IsZero(m.Selectors[i]) { // not required
				return nil
			}

			if err := m.Selectors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("selectors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("selectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SQLPipeline) contextValidateFilters(ctx context.Context, formats strfmt.Registry) error {

	if m.Filters != nil {

		if swag.IsZero(m.Filters) { // not required
			return nil
		}

		if err := m.Filters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filters")
			}
			return err
		}
	}

	return nil
}

func (m *SQLPipeline) contextValidateFrom(ctx context.Context, formats strfmt.Registry) error {

	if m.From != nil {

		if swag.IsZero(m.From) { // not required
			return nil
		}

		if err := m.From.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *SQLPipeline) contextValidateHaving(ctx context.Context, formats strfmt.Registry) error {

	if m.Having != nil {

		if swag.IsZero(m.Having) { // not required
			return nil
		}

		if err := m.Having.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("having")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("having")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SQLPipeline) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SQLPipeline) UnmarshalBinary(b []byte) error {
	var res SQLPipeline
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
