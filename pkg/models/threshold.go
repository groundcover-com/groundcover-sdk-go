// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Threshold Threshold defines a condition to evaluate against a reduced value.
//
// swagger:model Threshold
type Threshold struct {

	// Name of the reducer output this threshold applies to.
	// Required: true
	InputName *string `json:"inputName" yaml:"inputName"`

	// Name of the threshold.
	// Required: true
	Name *string `json:"name" yaml:"name"`

	// Comparison operator.
	// Required: true
	// Enum: ["gt"," lt"," within_range"," outside_range"]
	Operator *string `json:"operator" yaml:"operator"`

	// Values to compare against (one for gt/lt, two for range operators).
	// Required: true
	Values []float64 `json:"values" yaml:"values"`

	// relative timerange
	RelativeTimerange *RelativeTimerange `json:"relativeTimerange,omitempty" yaml:"relativeTimerange,omitempty"`
}

// Validate validates this threshold
func (m *Threshold) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelativeTimerange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Threshold) validateInputName(formats strfmt.Registry) error {

	if err := validate.Required("inputName", "body", m.InputName); err != nil {
		return err
	}

	return nil
}

func (m *Threshold) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var thresholdTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["gt"," lt"," within_range"," outside_range"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		thresholdTypeOperatorPropEnum = append(thresholdTypeOperatorPropEnum, v)
	}
}

const (

	// ThresholdOperatorGt captures enum value "gt"
	ThresholdOperatorGt string = "gt"

	// ThresholdOperatorLt captures enum value " lt"
	ThresholdOperatorLt string = " lt"

	// ThresholdOperatorWithinRange captures enum value " within_range"
	ThresholdOperatorWithinRange string = " within_range"

	// ThresholdOperatorOutsideRange captures enum value " outside_range"
	ThresholdOperatorOutsideRange string = " outside_range"
)

// prop value enum
func (m *Threshold) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, thresholdTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Threshold) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *Threshold) validateValues(formats strfmt.Registry) error {

	if err := validate.Required("values", "body", m.Values); err != nil {
		return err
	}

	return nil
}

func (m *Threshold) validateRelativeTimerange(formats strfmt.Registry) error {
	if swag.IsZero(m.RelativeTimerange) { // not required
		return nil
	}

	if m.RelativeTimerange != nil {
		if err := m.RelativeTimerange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relativeTimerange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relativeTimerange")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this threshold based on the context it is used
func (m *Threshold) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRelativeTimerange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Threshold) contextValidateRelativeTimerange(ctx context.Context, formats strfmt.Registry) error {

	if m.RelativeTimerange != nil {

		if swag.IsZero(m.RelativeTimerange) { // not required
			return nil
		}

		if err := m.RelativeTimerange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relativeTimerange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relativeTimerange")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Threshold) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Threshold) UnmarshalBinary(b []byte) error {
	var res Threshold
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
