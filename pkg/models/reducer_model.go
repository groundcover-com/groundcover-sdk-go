// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReducerModel ReducerModel defines how to aggregate or transform query results.
//
// swagger:model ReducerModel
type ReducerModel struct {

	// Math expression (if type is 'math').
	Expression string `json:"expression,omitempty"`

	// Name of the query or reducer output to use as input.
	InputName string `json:"inputName,omitempty"`

	// Name of the reducer output.
	Name string `json:"name,omitempty"`

	// Type of the reducer (e.g., last, min, max, mean, sum, count, math).
	// Required: true
	Type *string `json:"type"`

	// relative timerange
	RelativeTimerange *RelativeTimerange `json:"relativeTimerange,omitempty"`
}

// Validate validates this reducer model
func (m *ReducerModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelativeTimerange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReducerModel) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ReducerModel) validateRelativeTimerange(formats strfmt.Registry) error {
	if swag.IsZero(m.RelativeTimerange) { // not required
		return nil
	}

	if m.RelativeTimerange != nil {
		if err := m.RelativeTimerange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relativeTimerange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relativeTimerange")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this reducer model based on the context it is used
func (m *ReducerModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRelativeTimerange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReducerModel) contextValidateRelativeTimerange(ctx context.Context, formats strfmt.Registry) error {

	if m.RelativeTimerange != nil {

		if swag.IsZero(m.RelativeTimerange) { // not required
			return nil
		}

		if err := m.RelativeTimerange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relativeTimerange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relativeTimerange")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReducerModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReducerModel) UnmarshalBinary(b []byte) error {
	var res ReducerModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
