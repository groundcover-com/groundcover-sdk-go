// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateMonitorRequest update monitor request
//
// swagger:model UpdateMonitorRequest
type UpdateMonitorRequest struct {

	// Annotations to attach to the alert.
	Annotations map[string]string `json:"annotations,omitempty" yaml:"annotations,omitempty"`

	// Whether the alert should auto-resolve.
	AutoResolve bool `json:"autoResolve,omitempty" yaml:"autoResolve,omitempty"`

	// Category of the monitor.
	Category string `json:"category,omitempty" yaml:"category,omitempty"`

	// State to enter if execution fails.
	// Enum: ["OK"," Error"," Alerting"]
	ExecutionErrorState string `json:"executionErrorState,omitempty" yaml:"executionErrorState,omitempty"`

	// Whether the monitor is paused.
	IsPaused bool `json:"isPaused,omitempty" yaml:"isPaused,omitempty"`

	// Labels to attach to the monitor/alert.
	Labels map[string]string `json:"labels,omitempty" yaml:"labels,omitempty"`

	// Type of measurement (state or event).
	// Enum: ["state"," event"]
	MeasurementType string `json:"measurementType,omitempty" yaml:"measurementType,omitempty"`

	// State to enter if no data is returned.
	// Enum: ["OK"," NoData"," Alerting"]
	NoDataState string `json:"noDataState,omitempty" yaml:"noDataState,omitempty"`

	// Routing information.
	Routing []string `json:"routing" yaml:"routing"`

	// Severity level (e.g., critical, warning, info).
	Severity string `json:"severity,omitempty" yaml:"severity,omitempty"`

	// Team associated with the monitor.
	Team string `json:"team,omitempty" yaml:"team,omitempty"`

	// Title of the monitor.
	// Required: true
	Title *string `json:"title" yaml:"title"`

	// catalog
	Catalog *CatalogModel `json:"catalog,omitempty" yaml:"catalog,omitempty"`

	// display
	Display *DisplayModel `json:"display,omitempty" yaml:"display,omitempty"`

	// evaluation interval
	EvaluationInterval *EvaluationInterval `json:"evaluationInterval,omitempty" yaml:"evaluationInterval,omitempty"`

	// model
	Model *Model `json:"model,omitempty" yaml:"model,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *UpdateMonitorRequest) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Annotations map[string]string `json:"annotations,omitempty" yaml:"annotations,omitempty"`

		AutoResolve bool `json:"autoResolve,omitempty" yaml:"autoResolve,omitempty"`

		Category string `json:"category,omitempty" yaml:"category,omitempty"`

		ExecutionErrorState string `json:"executionErrorState,omitempty" yaml:"executionErrorState,omitempty"`

		IsPaused bool `json:"isPaused,omitempty" yaml:"isPaused,omitempty"`

		Labels map[string]string `json:"labels,omitempty" yaml:"labels,omitempty"`

		MeasurementType string `json:"measurementType,omitempty" yaml:"measurementType,omitempty"`

		NoDataState string `json:"noDataState,omitempty" yaml:"noDataState,omitempty"`

		Routing []string `json:"routing" yaml:"routing"`

		Severity string `json:"severity,omitempty" yaml:"severity,omitempty"`

		Team string `json:"team,omitempty" yaml:"team,omitempty"`

		Title *string `json:"title" yaml:"title"`

		Catalog *CatalogModel `json:"catalog,omitempty" yaml:"catalog,omitempty"`

		Display *DisplayModel `json:"display,omitempty" yaml:"display,omitempty"`

		EvaluationInterval *EvaluationInterval `json:"evaluationInterval,omitempty" yaml:"evaluationInterval,omitempty"`

		Model *Model `json:"model,omitempty" yaml:"model,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Annotations = dataAO0.Annotations

	m.AutoResolve = dataAO0.AutoResolve

	m.Category = dataAO0.Category

	m.ExecutionErrorState = dataAO0.ExecutionErrorState

	m.IsPaused = dataAO0.IsPaused

	m.Labels = dataAO0.Labels

	m.MeasurementType = dataAO0.MeasurementType

	m.NoDataState = dataAO0.NoDataState

	m.Routing = dataAO0.Routing

	m.Severity = dataAO0.Severity

	m.Team = dataAO0.Team

	m.Title = dataAO0.Title

	m.Catalog = dataAO0.Catalog

	m.Display = dataAO0.Display

	m.EvaluationInterval = dataAO0.EvaluationInterval

	m.Model = dataAO0.Model

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m UpdateMonitorRequest) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Annotations map[string]string `json:"annotations,omitempty" yaml:"annotations,omitempty"`

		AutoResolve bool `json:"autoResolve,omitempty" yaml:"autoResolve,omitempty"`

		Category string `json:"category,omitempty" yaml:"category,omitempty"`

		ExecutionErrorState string `json:"executionErrorState,omitempty" yaml:"executionErrorState,omitempty"`

		IsPaused bool `json:"isPaused,omitempty" yaml:"isPaused,omitempty"`

		Labels map[string]string `json:"labels,omitempty" yaml:"labels,omitempty"`

		MeasurementType string `json:"measurementType,omitempty" yaml:"measurementType,omitempty"`

		NoDataState string `json:"noDataState,omitempty" yaml:"noDataState,omitempty"`

		Routing []string `json:"routing" yaml:"routing"`

		Severity string `json:"severity,omitempty" yaml:"severity,omitempty"`

		Team string `json:"team,omitempty" yaml:"team,omitempty"`

		Title *string `json:"title" yaml:"title"`

		Catalog *CatalogModel `json:"catalog,omitempty" yaml:"catalog,omitempty"`

		Display *DisplayModel `json:"display,omitempty" yaml:"display,omitempty"`

		EvaluationInterval *EvaluationInterval `json:"evaluationInterval,omitempty" yaml:"evaluationInterval,omitempty"`

		Model *Model `json:"model,omitempty" yaml:"model,omitempty"`
	}

	dataAO0.Annotations = m.Annotations

	dataAO0.AutoResolve = m.AutoResolve

	dataAO0.Category = m.Category

	dataAO0.ExecutionErrorState = m.ExecutionErrorState

	dataAO0.IsPaused = m.IsPaused

	dataAO0.Labels = m.Labels

	dataAO0.MeasurementType = m.MeasurementType

	dataAO0.NoDataState = m.NoDataState

	dataAO0.Routing = m.Routing

	dataAO0.Severity = m.Severity

	dataAO0.Team = m.Team

	dataAO0.Title = m.Title

	dataAO0.Catalog = m.Catalog

	dataAO0.Display = m.Display

	dataAO0.EvaluationInterval = m.EvaluationInterval

	dataAO0.Model = m.Model

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this update monitor request
func (m *UpdateMonitorRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutionErrorState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeasurementType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoDataState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvaluationInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateMonitorRequestTypeExecutionErrorStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK"," Error"," Alerting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateMonitorRequestTypeExecutionErrorStatePropEnum = append(updateMonitorRequestTypeExecutionErrorStatePropEnum, v)
	}
}

// property enum
func (m *UpdateMonitorRequest) validateExecutionErrorStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateMonitorRequestTypeExecutionErrorStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateMonitorRequest) validateExecutionErrorState(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutionErrorState) { // not required
		return nil
	}

	// value enum
	if err := m.validateExecutionErrorStateEnum("executionErrorState", "body", m.ExecutionErrorState); err != nil {
		return err
	}

	return nil
}

var updateMonitorRequestTypeMeasurementTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["state"," event"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateMonitorRequestTypeMeasurementTypePropEnum = append(updateMonitorRequestTypeMeasurementTypePropEnum, v)
	}
}

// property enum
func (m *UpdateMonitorRequest) validateMeasurementTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateMonitorRequestTypeMeasurementTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateMonitorRequest) validateMeasurementType(formats strfmt.Registry) error {

	if swag.IsZero(m.MeasurementType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMeasurementTypeEnum("measurementType", "body", m.MeasurementType); err != nil {
		return err
	}

	return nil
}

var updateMonitorRequestTypeNoDataStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK"," NoData"," Alerting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateMonitorRequestTypeNoDataStatePropEnum = append(updateMonitorRequestTypeNoDataStatePropEnum, v)
	}
}

// property enum
func (m *UpdateMonitorRequest) validateNoDataStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateMonitorRequestTypeNoDataStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateMonitorRequest) validateNoDataState(formats strfmt.Registry) error {

	if swag.IsZero(m.NoDataState) { // not required
		return nil
	}

	// value enum
	if err := m.validateNoDataStateEnum("noDataState", "body", m.NoDataState); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMonitorRequest) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *UpdateMonitorRequest) validateCatalog(formats strfmt.Registry) error {

	if swag.IsZero(m.Catalog) { // not required
		return nil
	}

	if m.Catalog != nil {
		if err := m.Catalog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("catalog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("catalog")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateMonitorRequest) validateDisplay(formats strfmt.Registry) error {

	if swag.IsZero(m.Display) { // not required
		return nil
	}

	if m.Display != nil {
		if err := m.Display.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("display")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("display")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateMonitorRequest) validateEvaluationInterval(formats strfmt.Registry) error {

	if swag.IsZero(m.EvaluationInterval) { // not required
		return nil
	}

	if m.EvaluationInterval != nil {
		if err := m.EvaluationInterval.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evaluationInterval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evaluationInterval")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateMonitorRequest) validateModel(formats strfmt.Registry) error {

	if swag.IsZero(m.Model) { // not required
		return nil
	}

	if m.Model != nil {
		if err := m.Model.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("model")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update monitor request based on the context it is used
func (m *UpdateMonitorRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCatalog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvaluationInterval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateMonitorRequest) contextValidateCatalog(ctx context.Context, formats strfmt.Registry) error {

	if m.Catalog != nil {

		if swag.IsZero(m.Catalog) { // not required
			return nil
		}

		if err := m.Catalog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("catalog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("catalog")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateMonitorRequest) contextValidateDisplay(ctx context.Context, formats strfmt.Registry) error {

	if m.Display != nil {

		if swag.IsZero(m.Display) { // not required
			return nil
		}

		if err := m.Display.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("display")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("display")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateMonitorRequest) contextValidateEvaluationInterval(ctx context.Context, formats strfmt.Registry) error {

	if m.EvaluationInterval != nil {

		if swag.IsZero(m.EvaluationInterval) { // not required
			return nil
		}

		if err := m.EvaluationInterval.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evaluationInterval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evaluationInterval")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateMonitorRequest) contextValidateModel(ctx context.Context, formats strfmt.Registry) error {

	if m.Model != nil {

		if swag.IsZero(m.Model) { // not required
			return nil
		}

		if err := m.Model.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("model")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateMonitorRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateMonitorRequest) UnmarshalBinary(b []byte) error {
	var res UpdateMonitorRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
