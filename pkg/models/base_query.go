// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BaseQuery BaseQuery is the base struct for different query types.
//
// swagger:model BaseQuery
type BaseQuery struct {

	// conditions
	Conditions []*Condition `json:"conditions" yaml:"conditions"`

	// data type
	DataType string `json:"dataType,omitempty" yaml:"dataType,omitempty"`

	// datasource ID
	DatasourceID string `json:"datasourceID,omitempty" yaml:"datasourceID,omitempty"`

	// datasource type
	DatasourceType string `json:"datasourceType,omitempty" yaml:"datasourceType,omitempty"`

	// expression
	Expression string `json:"expression,omitempty" yaml:"expression,omitempty"`

	// filters
	Filters string `json:"filters,omitempty" yaml:"filters,omitempty"`

	// instant rollup
	InstantRollup string `json:"instantRollup,omitempty" yaml:"instantRollup,omitempty"`

	// name
	Name string `json:"name,omitempty" yaml:"name,omitempty"`

	// query type
	QueryType string `json:"queryType,omitempty" yaml:"queryType,omitempty"`

	// pipeline
	Pipeline *PromqlPipeline `json:"pipeline,omitempty" yaml:"pipeline,omitempty"`

	// relative timerange
	RelativeTimerange *RelativeTimerange `json:"relativeTimerange,omitempty" yaml:"relativeTimerange,omitempty"`

	// rollup
	Rollup *Rollup `json:"rollup,omitempty" yaml:"rollup,omitempty"`

	// sql pipeline
	SQLPipeline *SQLPipeline `json:"sqlPipeline,omitempty" yaml:"sqlPipeline,omitempty"`
}

// Validate validates this base query
func (m *BaseQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipeline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelativeTimerange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRollup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLPipeline(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseQuery) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *BaseQuery) validatePipeline(formats strfmt.Registry) error {
	if swag.IsZero(m.Pipeline) { // not required
		return nil
	}

	if m.Pipeline != nil {
		if err := m.Pipeline.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("pipeline")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("pipeline")
			}

			return err
		}
	}

	return nil
}

func (m *BaseQuery) validateRelativeTimerange(formats strfmt.Registry) error {
	if swag.IsZero(m.RelativeTimerange) { // not required
		return nil
	}

	if m.RelativeTimerange != nil {
		if err := m.RelativeTimerange.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("relativeTimerange")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("relativeTimerange")
			}

			return err
		}
	}

	return nil
}

func (m *BaseQuery) validateRollup(formats strfmt.Registry) error {
	if swag.IsZero(m.Rollup) { // not required
		return nil
	}

	if m.Rollup != nil {
		if err := m.Rollup.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("rollup")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("rollup")
			}

			return err
		}
	}

	return nil
}

func (m *BaseQuery) validateSQLPipeline(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLPipeline) { // not required
		return nil
	}

	if m.SQLPipeline != nil {
		if err := m.SQLPipeline.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("sqlPipeline")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("sqlPipeline")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this base query based on the context it is used
func (m *BaseQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePipeline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelativeTimerange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRollup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLPipeline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseQuery) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {

			if swag.IsZero(m.Conditions[i]) { // not required
				return nil
			}

			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *BaseQuery) contextValidatePipeline(ctx context.Context, formats strfmt.Registry) error {

	if m.Pipeline != nil {

		if swag.IsZero(m.Pipeline) { // not required
			return nil
		}

		if err := m.Pipeline.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("pipeline")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("pipeline")
			}

			return err
		}
	}

	return nil
}

func (m *BaseQuery) contextValidateRelativeTimerange(ctx context.Context, formats strfmt.Registry) error {

	if m.RelativeTimerange != nil {

		if swag.IsZero(m.RelativeTimerange) { // not required
			return nil
		}

		if err := m.RelativeTimerange.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("relativeTimerange")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("relativeTimerange")
			}

			return err
		}
	}

	return nil
}

func (m *BaseQuery) contextValidateRollup(ctx context.Context, formats strfmt.Registry) error {

	if m.Rollup != nil {

		if swag.IsZero(m.Rollup) { // not required
			return nil
		}

		if err := m.Rollup.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("rollup")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("rollup")
			}

			return err
		}
	}

	return nil
}

func (m *BaseQuery) contextValidateSQLPipeline(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLPipeline != nil {

		if swag.IsZero(m.SQLPipeline) { // not required
			return nil
		}

		if err := m.SQLPipeline.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("sqlPipeline")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("sqlPipeline")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BaseQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseQuery) UnmarshalBinary(b []byte) error {
	var res BaseQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
