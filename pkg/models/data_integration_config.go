// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataIntegrationConfig data integration config
//
// swagger:model DataIntegrationConfig
type DataIntegrationConfig struct {

	// cluster
	Cluster *string `json:"cluster,omitempty"`

	// config
	Config string `json:"config,omitempty"`

	// env
	Env *string `json:"env,omitempty"`

	// ID
	ID string `json:"id,omitempty"`

	// instance
	Instance *string `json:"instance,omitempty"`

	// is archived
	IsArchived bool `json:"is_archived,omitempty"`

	// is paused
	IsPaused bool `json:"is_paused,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// update timestamp
	// Format: date-time
	UpdateTimestamp strfmt.DateTime `json:"update_timestamp,omitempty"`

	// updated by
	UpdatedBy string `json:"updated_by,omitempty"`
}

// Validate validates this data integration config
func (m *DataIntegrationConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUpdateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataIntegrationConfig) validateUpdateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("update_timestamp", "body", "date-time", m.UpdateTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this data integration config based on context it is used
func (m *DataIntegrationConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataIntegrationConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataIntegrationConfig) UnmarshalBinary(b []byte) error {
	var res DataIntegrationConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
