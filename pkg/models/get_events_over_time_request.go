// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetEventsOverTimeRequest GetEventsOverTimeRequest defines the request structure for fetching events over time.
//
// swagger:model GetEventsOverTimeRequest
type GetEventsOverTimeRequest struct {

	// Conditions to filter events.
	Conditions []*Condition `json:"Conditions"`

	// End timestamp for the query range.
	// Required: true
	// Format: date-time
	End *strfmt.DateTime `json:"End"`

	// Maximum number of events to return.
	Limit uint32 `json:"Limit,omitempty"`

	// Number of events to skip (for pagination).
	Skip uint32 `json:"Skip,omitempty"`

	// Field to sort events by.
	// Required: true
	// Enum: ["timestamp","namespace","instance","object_kind","firstSeen","lastSeen","type","reason","count","workload","cluster"]
	SortBy *string `json:"SortBy"`

	// Sort order.
	// Required: true
	// Enum: ["asc","desc"]
	SortOrder *string `json:"SortOrder"`

	// Source filters for events.
	Sources []*Condition `json:"Sources"`

	// Start timestamp for the query range.
	// Required: true
	// Format: date-time
	Start *strfmt.DateTime `json:"Start"`

	// Include raw event data in the response.
	WithRawEvents bool `json:"WithRawEvents,omitempty"`
}

// Validate validates this get events over time request
func (m *GetEventsOverTimeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetEventsOverTimeRequest) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Conditions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Conditions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *GetEventsOverTimeRequest) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("End", "body", m.End); err != nil {
		return err
	}

	if err := validate.FormatOf("End", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

var getEventsOverTimeRequestTypeSortByPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["timestamp","namespace","instance","object_kind","firstSeen","lastSeen","type","reason","count","workload","cluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getEventsOverTimeRequestTypeSortByPropEnum = append(getEventsOverTimeRequestTypeSortByPropEnum, v)
	}
}

const (

	// GetEventsOverTimeRequestSortByTimestamp captures enum value "timestamp"
	GetEventsOverTimeRequestSortByTimestamp string = "timestamp"

	// GetEventsOverTimeRequestSortByNamespace captures enum value "namespace"
	GetEventsOverTimeRequestSortByNamespace string = "namespace"

	// GetEventsOverTimeRequestSortByInstance captures enum value "instance"
	GetEventsOverTimeRequestSortByInstance string = "instance"

	// GetEventsOverTimeRequestSortByObjectKind captures enum value "object_kind"
	GetEventsOverTimeRequestSortByObjectKind string = "object_kind"

	// GetEventsOverTimeRequestSortByFirstSeen captures enum value "firstSeen"
	GetEventsOverTimeRequestSortByFirstSeen string = "firstSeen"

	// GetEventsOverTimeRequestSortByLastSeen captures enum value "lastSeen"
	GetEventsOverTimeRequestSortByLastSeen string = "lastSeen"

	// GetEventsOverTimeRequestSortByType captures enum value "type"
	GetEventsOverTimeRequestSortByType string = "type"

	// GetEventsOverTimeRequestSortByReason captures enum value "reason"
	GetEventsOverTimeRequestSortByReason string = "reason"

	// GetEventsOverTimeRequestSortByCount captures enum value "count"
	GetEventsOverTimeRequestSortByCount string = "count"

	// GetEventsOverTimeRequestSortByWorkload captures enum value "workload"
	GetEventsOverTimeRequestSortByWorkload string = "workload"

	// GetEventsOverTimeRequestSortByCluster captures enum value "cluster"
	GetEventsOverTimeRequestSortByCluster string = "cluster"
)

// prop value enum
func (m *GetEventsOverTimeRequest) validateSortByEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getEventsOverTimeRequestTypeSortByPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetEventsOverTimeRequest) validateSortBy(formats strfmt.Registry) error {

	if err := validate.Required("SortBy", "body", m.SortBy); err != nil {
		return err
	}

	// value enum
	if err := m.validateSortByEnum("SortBy", "body", *m.SortBy); err != nil {
		return err
	}

	return nil
}

var getEventsOverTimeRequestTypeSortOrderPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["asc","desc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getEventsOverTimeRequestTypeSortOrderPropEnum = append(getEventsOverTimeRequestTypeSortOrderPropEnum, v)
	}
}

const (

	// GetEventsOverTimeRequestSortOrderAsc captures enum value "asc"
	GetEventsOverTimeRequestSortOrderAsc string = "asc"

	// GetEventsOverTimeRequestSortOrderDesc captures enum value "desc"
	GetEventsOverTimeRequestSortOrderDesc string = "desc"
)

// prop value enum
func (m *GetEventsOverTimeRequest) validateSortOrderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getEventsOverTimeRequestTypeSortOrderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetEventsOverTimeRequest) validateSortOrder(formats strfmt.Registry) error {

	if err := validate.Required("SortOrder", "body", m.SortOrder); err != nil {
		return err
	}

	// value enum
	if err := m.validateSortOrderEnum("SortOrder", "body", *m.SortOrder); err != nil {
		return err
	}

	return nil
}

func (m *GetEventsOverTimeRequest) validateSources(formats strfmt.Registry) error {
	if swag.IsZero(m.Sources) { // not required
		return nil
	}

	for i := 0; i < len(m.Sources); i++ {
		if swag.IsZero(m.Sources[i]) { // not required
			continue
		}

		if m.Sources[i] != nil {
			if err := m.Sources[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Sources" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Sources" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *GetEventsOverTimeRequest) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("Start", "body", m.Start); err != nil {
		return err
	}

	if err := validate.FormatOf("Start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get events over time request based on the context it is used
func (m *GetEventsOverTimeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetEventsOverTimeRequest) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {

			if swag.IsZero(m.Conditions[i]) { // not required
				return nil
			}

			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Conditions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Conditions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *GetEventsOverTimeRequest) contextValidateSources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Sources); i++ {

		if m.Sources[i] != nil {

			if swag.IsZero(m.Sources[i]) { // not required
				return nil
			}

			if err := m.Sources[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Sources" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Sources" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetEventsOverTimeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetEventsOverTimeRequest) UnmarshalBinary(b []byte) error {
	var res GetEventsOverTimeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
