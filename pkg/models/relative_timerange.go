// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RelativeTimerange RelativeTimerange defines a time range relative to the evaluation time.
//
// swagger:model RelativeTimerange
type RelativeTimerange struct {

	// Start of the range relative to now (e.g., "-5m", "-1h").
	// Format: duration
	From strfmt.Duration `json:"from,omitempty"`

	// End of the range relative to now (e.g., "-1m", "now").
	// Format: duration
	To strfmt.Duration `json:"to,omitempty"`
}

// Validate validates this relative timerange
func (m *RelativeTimerange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RelativeTimerange) validateFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.From) { // not required
		return nil
	}

	if err := validate.FormatOf("from", "body", "duration", m.From.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RelativeTimerange) validateTo(formats strfmt.Registry) error {
	if swag.IsZero(m.To) { // not required
		return nil
	}

	if err := validate.FormatOf("to", "body", "duration", m.To.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this relative timerange based on context it is used
func (m *RelativeTimerange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RelativeTimerange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RelativeTimerange) UnmarshalBinary(b []byte) error {
	var res RelativeTimerange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
