// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AdvancedDataScope AdvancedDataScope defines fine-grained data scoping rules.
//
// swagger:model AdvancedDataScope
type AdvancedDataScope struct {

	// events
	Events *Group `json:"events,omitempty"`

	// logs
	Logs *Group `json:"logs,omitempty"`

	// metrics
	Metrics *Group `json:"metrics,omitempty"`

	// traces
	Traces *Group `json:"traces,omitempty"`

	// workloads
	Workloads *Group `json:"workloads,omitempty"`
}

// Validate validates this advanced data scope
func (m *AdvancedDataScope) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloads(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdvancedDataScope) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.Events) { // not required
		return nil
	}

	if m.Events != nil {
		if err := m.Events.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("events")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("events")
			}

			return err
		}
	}

	return nil
}

func (m *AdvancedDataScope) validateLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.Logs) { // not required
		return nil
	}

	if m.Logs != nil {
		if err := m.Logs.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("logs")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("logs")
			}

			return err
		}
	}

	return nil
}

func (m *AdvancedDataScope) validateMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	if m.Metrics != nil {
		if err := m.Metrics.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("metrics")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("metrics")
			}

			return err
		}
	}

	return nil
}

func (m *AdvancedDataScope) validateTraces(formats strfmt.Registry) error {
	if swag.IsZero(m.Traces) { // not required
		return nil
	}

	if m.Traces != nil {
		if err := m.Traces.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("traces")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("traces")
			}

			return err
		}
	}

	return nil
}

func (m *AdvancedDataScope) validateWorkloads(formats strfmt.Registry) error {
	if swag.IsZero(m.Workloads) { // not required
		return nil
	}

	if m.Workloads != nil {
		if err := m.Workloads.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("workloads")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("workloads")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this advanced data scope based on the context it is used
func (m *AdvancedDataScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTraces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkloads(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdvancedDataScope) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	if m.Events != nil {

		if swag.IsZero(m.Events) { // not required
			return nil
		}

		if err := m.Events.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("events")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("events")
			}

			return err
		}
	}

	return nil
}

func (m *AdvancedDataScope) contextValidateLogs(ctx context.Context, formats strfmt.Registry) error {

	if m.Logs != nil {

		if swag.IsZero(m.Logs) { // not required
			return nil
		}

		if err := m.Logs.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("logs")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("logs")
			}

			return err
		}
	}

	return nil
}

func (m *AdvancedDataScope) contextValidateMetrics(ctx context.Context, formats strfmt.Registry) error {

	if m.Metrics != nil {

		if swag.IsZero(m.Metrics) { // not required
			return nil
		}

		if err := m.Metrics.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("metrics")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("metrics")
			}

			return err
		}
	}

	return nil
}

func (m *AdvancedDataScope) contextValidateTraces(ctx context.Context, formats strfmt.Registry) error {

	if m.Traces != nil {

		if swag.IsZero(m.Traces) { // not required
			return nil
		}

		if err := m.Traces.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("traces")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("traces")
			}

			return err
		}
	}

	return nil
}

func (m *AdvancedDataScope) contextValidateWorkloads(ctx context.Context, formats strfmt.Registry) error {

	if m.Workloads != nil {

		if swag.IsZero(m.Workloads) { // not required
			return nil
		}

		if err := m.Workloads.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("workloads")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("workloads")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdvancedDataScope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdvancedDataScope) UnmarshalBinary(b []byte) error {
	var res AdvancedDataScope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
