// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateIngestionKeyRequest create ingestion key request
//
// swagger:model CreateIngestionKeyRequest
type CreateIngestionKeyRequest struct {

	// The desired name for the ingestion key.
	// Required: true
	Name *string `json:"name"`

	// Indicates whether the key is explicitly for remote configuration or not.
	RemoteConfig *bool `json:"remoteConfig,omitempty"`

	// A list of tags to associate with the key.
	Tags []string `json:"tags"`

	// The type of the ingestion key.
	// Required: true
	// Enum: ["sensor","rum","thirdParty"]
	Type *string `json:"type"`
}

// Validate validates this create ingestion key request
func (m *CreateIngestionKeyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateIngestionKeyRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var createIngestionKeyRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sensor","rum","thirdParty"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createIngestionKeyRequestTypeTypePropEnum = append(createIngestionKeyRequestTypeTypePropEnum, v)
	}
}

const (

	// CreateIngestionKeyRequestTypeSensor captures enum value "sensor"
	CreateIngestionKeyRequestTypeSensor string = "sensor"

	// CreateIngestionKeyRequestTypeRum captures enum value "rum"
	CreateIngestionKeyRequestTypeRum string = "rum"

	// CreateIngestionKeyRequestTypeThirdParty captures enum value "thirdParty"
	CreateIngestionKeyRequestTypeThirdParty string = "thirdParty"
)

// prop value enum
func (m *CreateIngestionKeyRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createIngestionKeyRequestTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateIngestionKeyRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create ingestion key request based on context it is used
func (m *CreateIngestionKeyRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateIngestionKeyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateIngestionKeyRequest) UnmarshalBinary(b []byte) error {
	var res CreateIngestionKeyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
