// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Join Join defines a join operation between two pipelines.
//
// swagger:model Join
type Join struct {

	// OnConditions defines the join conditions
	OnConditions []*JoinCondition `json:"onConditions"`

	// left pipeline
	LeftPipeline *SQLPipeline `json:"leftPipeline,omitempty"`

	// right pipeline
	RightPipeline *SQLPipeline `json:"rightPipeline,omitempty"`

	// type
	Type JoinType `json:"type,omitempty"`
}

// Validate validates this join
func (m *Join) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOnConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLeftPipeline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRightPipeline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Join) validateOnConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.OnConditions) { // not required
		return nil
	}

	for i := 0; i < len(m.OnConditions); i++ {
		if swag.IsZero(m.OnConditions[i]) { // not required
			continue
		}

		if m.OnConditions[i] != nil {
			if err := m.OnConditions[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("onConditions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("onConditions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *Join) validateLeftPipeline(formats strfmt.Registry) error {
	if swag.IsZero(m.LeftPipeline) { // not required
		return nil
	}

	if m.LeftPipeline != nil {
		if err := m.LeftPipeline.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("leftPipeline")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("leftPipeline")
			}

			return err
		}
	}

	return nil
}

func (m *Join) validateRightPipeline(formats strfmt.Registry) error {
	if swag.IsZero(m.RightPipeline) { // not required
		return nil
	}

	if m.RightPipeline != nil {
		if err := m.RightPipeline.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("rightPipeline")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("rightPipeline")
			}

			return err
		}
	}

	return nil
}

func (m *Join) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("type")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("type")
		}

		return err
	}

	return nil
}

// ContextValidate validate this join based on the context it is used
func (m *Join) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOnConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLeftPipeline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRightPipeline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Join) contextValidateOnConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OnConditions); i++ {

		if m.OnConditions[i] != nil {

			if swag.IsZero(m.OnConditions[i]) { // not required
				return nil
			}

			if err := m.OnConditions[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("onConditions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("onConditions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *Join) contextValidateLeftPipeline(ctx context.Context, formats strfmt.Registry) error {

	if m.LeftPipeline != nil {

		if swag.IsZero(m.LeftPipeline) { // not required
			return nil
		}

		if err := m.LeftPipeline.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("leftPipeline")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("leftPipeline")
			}

			return err
		}
	}

	return nil
}

func (m *Join) contextValidateRightPipeline(ctx context.Context, formats strfmt.Registry) error {

	if m.RightPipeline != nil {

		if swag.IsZero(m.RightPipeline) { // not required
			return nil
		}

		if err := m.RightPipeline.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("rightPipeline")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("rightPipeline")
			}

			return err
		}
	}

	return nil
}

func (m *Join) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("type")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("type")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Join) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Join) UnmarshalBinary(b []byte) error {
	var res Join
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
