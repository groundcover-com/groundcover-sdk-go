// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplyPolicyRequest apply policy request
//
// swagger:model ApplyPolicyRequest
type ApplyPolicyRequest struct {

	// List of user emails to apply policies to.
	// Required: true
	// Min Items: 1
	Emails []string `json:"emails"`

	// If true, replaces existing policies; otherwise appends.
	Override bool `json:"override,omitempty"`

	// List of policy UUIDs to apply.
	// Required: true
	// Min Items: 1
	PolicyUUIDs []string `json:"policyUUIDs"`
}

// Validate validates this apply policy request
func (m *ApplyPolicyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyUUIDs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplyPolicyRequest) validateEmails(formats strfmt.Registry) error {

	if err := validate.Required("emails", "body", m.Emails); err != nil {
		return err
	}

	iEmailsSize := int64(len(m.Emails))

	if err := validate.MinItems("emails", "body", iEmailsSize, 1); err != nil {
		return err
	}

	return nil
}

func (m *ApplyPolicyRequest) validatePolicyUUIDs(formats strfmt.Registry) error {

	if err := validate.Required("policyUUIDs", "body", m.PolicyUUIDs); err != nil {
		return err
	}

	iPolicyUUIDsSize := int64(len(m.PolicyUUIDs))

	if err := validate.MinItems("policyUUIDs", "body", iPolicyUUIDsSize, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this apply policy request based on context it is used
func (m *ApplyPolicyRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ApplyPolicyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplyPolicyRequest) UnmarshalBinary(b []byte) error {
	var res ApplyPolicyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
