// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateAPIKeyRequest create Api key request
//
// swagger:model CreateApiKeyRequest
type CreateAPIKeyRequest struct {

	// Optional description for the API key.
	Description string `json:"description,omitempty"`

	// Optional expiration date for the API key.
	// Format: date-time
	// Format: date-time
	ExpirationDate strfmt.DateTime `json:"expirationDate,omitempty"`

	// User-defined name for the API key.
	// Required: true
	Name *string `json:"name"`

	// The UUID of the service account this key belongs to.
	// Required: true
	SeriveAccountID *string `json:"serviceAccountId"`
}

// Validate validates this create Api key request
func (m *CreateAPIKeyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeriveAccountID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAPIKeyRequest) validateExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationDate", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateAPIKeyRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateAPIKeyRequest) validateSeriveAccountID(formats strfmt.Registry) error {

	if err := validate.Required("serviceAccountId", "body", m.SeriveAccountID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create Api key request based on context it is used
func (m *CreateAPIKeyRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateAPIKeyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAPIKeyRequest) UnmarshalBinary(b []byte) error {
	var res CreateAPIKeyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
