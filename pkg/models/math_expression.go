// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MathExpression math expression
//
// swagger:model MathExpression
type MathExpression struct {

	// alias
	Alias string `json:"alias,omitempty"`

	// args
	Args []*MathExpression `json:"args"`

	// scalar
	Scalar string `json:"scalar,omitempty"`

	// column
	Column *Column `json:"column,omitempty"`

	// math operator
	MathOperator MathOperator `json:"math_operator,omitempty"`
}

// Validate validates this math expression
func (m *MathExpression) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArgs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateColumn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMathOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MathExpression) validateArgs(formats strfmt.Registry) error {
	if swag.IsZero(m.Args) { // not required
		return nil
	}

	for i := 0; i < len(m.Args); i++ {
		if swag.IsZero(m.Args[i]) { // not required
			continue
		}

		if m.Args[i] != nil {
			if err := m.Args[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("args" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("args" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *MathExpression) validateColumn(formats strfmt.Registry) error {
	if swag.IsZero(m.Column) { // not required
		return nil
	}

	if m.Column != nil {
		if err := m.Column.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("column")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("column")
			}

			return err
		}
	}

	return nil
}

func (m *MathExpression) validateMathOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.MathOperator) { // not required
		return nil
	}

	if err := m.MathOperator.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("math_operator")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("math_operator")
		}

		return err
	}

	return nil
}

// ContextValidate validate this math expression based on the context it is used
func (m *MathExpression) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArgs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateColumn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMathOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MathExpression) contextValidateArgs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Args); i++ {

		if m.Args[i] != nil {

			if swag.IsZero(m.Args[i]) { // not required
				return nil
			}

			if err := m.Args[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("args" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("args" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *MathExpression) contextValidateColumn(ctx context.Context, formats strfmt.Registry) error {

	if m.Column != nil {

		if swag.IsZero(m.Column) { // not required
			return nil
		}

		if err := m.Column.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("column")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("column")
			}

			return err
		}
	}

	return nil
}

func (m *MathExpression) contextValidateMathOperator(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.MathOperator) { // not required
		return nil
	}

	if err := m.MathOperator.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("math_operator")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("math_operator")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MathExpression) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MathExpression) UnmarshalBinary(b []byte) error {
	var res MathExpression
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
