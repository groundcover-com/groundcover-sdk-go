// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Selector selector
//
// swagger:model Selector
type Selector struct {

	// additional filter
	AdditionalFilter string `json:"additionalFilter,omitempty" yaml:"additionalFilter,omitempty"`

	// alias
	Alias string `json:"alias,omitempty" yaml:"alias,omitempty"`

	// auto complete
	AutoComplete bool `json:"autoComplete,omitempty" yaml:"autoComplete,omitempty"`

	// filter keys
	FilterKeys []string `json:"filterKeys" yaml:"filterKeys"`

	// is nullable
	IsNullable bool `json:"isNullable,omitempty" yaml:"isNullable,omitempty"`

	// key
	Key string `json:"key,omitempty" yaml:"key,omitempty"`

	// origin
	Origin string `json:"origin,omitempty" yaml:"origin,omitempty"`

	// processors
	Processors []*Processor `json:"processors" yaml:"processors"`

	// type
	Type string `json:"type,omitempty" yaml:"type,omitempty"`
}

// Validate validates this selector
func (m *Selector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProcessors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Selector) validateProcessors(formats strfmt.Registry) error {
	if swag.IsZero(m.Processors) { // not required
		return nil
	}

	for i := 0; i < len(m.Processors); i++ {
		if swag.IsZero(m.Processors[i]) { // not required
			continue
		}

		if m.Processors[i] != nil {
			if err := m.Processors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this selector based on the context it is used
func (m *Selector) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProcessors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Selector) contextValidateProcessors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Processors); i++ {

		if m.Processors[i] != nil {

			if swag.IsZero(m.Processors[i]) { // not required
				return nil
			}

			if err := m.Processors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Selector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Selector) UnmarshalBinary(b []byte) error {
	var res Selector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
