// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TracesSearchRequest traces search request
//
// swagger:model TracesSearchRequest
type TracesSearchRequest struct {

	// EnableStream indicates if the response should be streamed
	EnableStream bool `json:"EnableStream,omitempty"`

	// End time of the search range
	// Required: true
	// Format: date-time
	End *strfmt.DateTime `json:"End"`

	// Extra filters to apply on the traces
	Filters string `json:"Filters,omitempty"`

	// pipeline
	Pipeline *SQLPipeline `json:"Pipeline,omitempty"`

	// LogsQL Query to filter traces
	Query string `json:"Query,omitempty"`

	// Sources to filter traces
	Sources []*Condition `json:"Sources"`

	// Start time of the search range
	// Required: true
	// Format: date-time
	Start *strfmt.DateTime `json:"Start"`

	// TryToUseBuckets indicates if the search should be run using buckets
	TryToUseBuckets bool `json:"TryToUseBuckets,omitempty"`
}

// Validate validates this traces search request
func (m *TracesSearchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipeline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TracesSearchRequest) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("End", "body", m.End); err != nil {
		return err
	}

	if err := validate.FormatOf("End", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TracesSearchRequest) validatePipeline(formats strfmt.Registry) error {
	if swag.IsZero(m.Pipeline) { // not required
		return nil
	}

	if m.Pipeline != nil {
		if err := m.Pipeline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Pipeline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Pipeline")
			}
			return err
		}
	}

	return nil
}

func (m *TracesSearchRequest) validateSources(formats strfmt.Registry) error {
	if swag.IsZero(m.Sources) { // not required
		return nil
	}

	for i := 0; i < len(m.Sources); i++ {
		if swag.IsZero(m.Sources[i]) { // not required
			continue
		}

		if m.Sources[i] != nil {
			if err := m.Sources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Sources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Sources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TracesSearchRequest) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("Start", "body", m.Start); err != nil {
		return err
	}

	if err := validate.FormatOf("Start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this traces search request based on the context it is used
func (m *TracesSearchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePipeline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TracesSearchRequest) contextValidatePipeline(ctx context.Context, formats strfmt.Registry) error {

	if m.Pipeline != nil {

		if swag.IsZero(m.Pipeline) { // not required
			return nil
		}

		if err := m.Pipeline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Pipeline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Pipeline")
			}
			return err
		}
	}

	return nil
}

func (m *TracesSearchRequest) contextValidateSources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Sources); i++ {

		if m.Sources[i] != nil {

			if swag.IsZero(m.Sources[i]) { // not required
				return nil
			}

			if err := m.Sources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Sources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Sources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TracesSearchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TracesSearchRequest) UnmarshalBinary(b []byte) error {
	var res TracesSearchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
