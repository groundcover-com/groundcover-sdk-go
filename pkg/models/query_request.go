// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryRequest QueryRequest represents a request to query metrics
//
// swagger:model QueryRequest
type QueryRequest struct {

	// Additional conditions to apply
	Conditions []*Condition `json:"Conditions"`

	// End time for the query
	// Format: date-time
	End strfmt.DateTime `json:"End,omitempty"`

	// LogsQL filters to apply
	Filters string `json:"Filters,omitempty"`

	// pipeline
	Pipeline *PromqlPipeline `json:"Pipeline,omitempty"`

	// Direct PromQL query string
	Promql string `json:"Promql,omitempty"`

	// Query type: either "range" or "instant"
	// range MetricsQueryTypeRange
	// instant MetricsQueryTypeInstant
	// Enum: ["range","instant"]
	QueryType string `json:"QueryType,omitempty"`

	// Start time for the query
	// Format: date-time
	Start strfmt.DateTime `json:"Start,omitempty"`

	// Step duration for range queries (e.g., "1m", "5m")
	Step string `json:"Step,omitempty"`

	// sub pipelines
	SubPipelines KnownPipelines `json:"SubPipelines,omitempty"`
}

// Validate validates this query request
func (m *QueryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipeline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubPipelines(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryRequest) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Conditions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Conditions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *QueryRequest) validateEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.End) { // not required
		return nil
	}

	if err := validate.FormatOf("End", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *QueryRequest) validatePipeline(formats strfmt.Registry) error {
	if swag.IsZero(m.Pipeline) { // not required
		return nil
	}

	if m.Pipeline != nil {
		if err := m.Pipeline.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Pipeline")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Pipeline")
			}

			return err
		}
	}

	return nil
}

var queryRequestTypeQueryTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["range","instant"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queryRequestTypeQueryTypePropEnum = append(queryRequestTypeQueryTypePropEnum, v)
	}
}

const (

	// QueryRequestQueryTypeRange captures enum value "range"
	QueryRequestQueryTypeRange string = "range"

	// QueryRequestQueryTypeInstant captures enum value "instant"
	QueryRequestQueryTypeInstant string = "instant"
)

// prop value enum
func (m *QueryRequest) validateQueryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, queryRequestTypeQueryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QueryRequest) validateQueryType(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateQueryTypeEnum("QueryType", "body", m.QueryType); err != nil {
		return err
	}

	return nil
}

func (m *QueryRequest) validateStart(formats strfmt.Registry) error {
	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("Start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *QueryRequest) validateSubPipelines(formats strfmt.Registry) error {
	if swag.IsZero(m.SubPipelines) { // not required
		return nil
	}

	if m.SubPipelines != nil {
		if err := m.SubPipelines.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("SubPipelines")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("SubPipelines")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this query request based on the context it is used
func (m *QueryRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePipeline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubPipelines(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryRequest) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {

			if swag.IsZero(m.Conditions[i]) { // not required
				return nil
			}

			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Conditions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Conditions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *QueryRequest) contextValidatePipeline(ctx context.Context, formats strfmt.Registry) error {

	if m.Pipeline != nil {

		if swag.IsZero(m.Pipeline) { // not required
			return nil
		}

		if err := m.Pipeline.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Pipeline")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Pipeline")
			}

			return err
		}
	}

	return nil
}

func (m *QueryRequest) contextValidateSubPipelines(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SubPipelines) { // not required
		return nil
	}

	if err := m.SubPipelines.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("SubPipelines")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("SubPipelines")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryRequest) UnmarshalBinary(b []byte) error {
	var res QueryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
