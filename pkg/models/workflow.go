// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Workflow workflow
//
// swagger:model Workflow
type Workflow struct {

	// User who created the workflow
	CreatedBy string `json:"created_by,omitempty"`

	// Timestamp when the workflow was created
	// Format: date-time
	CreationTime strfmt.DateTime `json:"creation_time,omitempty"`

	// Description of the workflow
	Description string `json:"description,omitempty"`

	// Unique identifier of the workflow
	ID string `json:"id,omitempty"`

	// Execution interval in seconds
	Interval int64 `json:"interval,omitempty"`

	// Whether the workflow configuration is invalid
	Invalid bool `json:"invalid,omitempty"`

	// Timestamp when the last execution started
	// Format: date-time
	LastExecutionStarted strfmt.DateTime `json:"last_execution_started,omitempty"`

	// Status of the last execution
	LastExecutionStatus string `json:"last_execution_status,omitempty"`

	// Timestamp of the last execution
	// Format: date-time
	LastExecutionTime strfmt.DateTime `json:"last_execution_time,omitempty"`

	// Timestamp when the workflow was last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// Human-readable name of the workflow
	Name string `json:"name,omitempty"`

	// List of providers used by the workflow
	Providers []*Provider `json:"providers"`

	// Current revision number of the workflow
	Revision int64 `json:"revision,omitempty"`

	// List of triggers associated with the workflow
	Triggers []*Trigger `json:"triggers"`

	// Raw workflow definition
	WorkflowRaw string `json:"workflow_raw,omitempty"`

	// Raw workflow identifier
	WorkflowRawID string `json:"workflow_raw_id,omitempty"`
}

// Validate validates this workflow
func (m *Workflow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecutionStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecutionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Workflow) validateCreationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_time", "body", "date-time", m.CreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateLastExecutionStarted(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecutionStarted) { // not required
		return nil
	}

	if err := validate.FormatOf("last_execution_started", "body", "date-time", m.LastExecutionStarted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateLastExecutionTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecutionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("last_execution_time", "body", "date-time", m.LastExecutionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateProviders(formats strfmt.Registry) error {
	if swag.IsZero(m.Providers) { // not required
		return nil
	}

	for i := 0; i < len(m.Providers); i++ {
		if swag.IsZero(m.Providers[i]) { // not required
			continue
		}

		if m.Providers[i] != nil {
			if err := m.Providers[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("providers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("providers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *Workflow) validateTriggers(formats strfmt.Registry) error {
	if swag.IsZero(m.Triggers) { // not required
		return nil
	}

	for i := 0; i < len(m.Triggers); i++ {
		if swag.IsZero(m.Triggers[i]) { // not required
			continue
		}

		if m.Triggers[i] != nil {
			if err := m.Triggers[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("triggers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("triggers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this workflow based on the context it is used
func (m *Workflow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProviders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Workflow) contextValidateProviders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Providers); i++ {

		if m.Providers[i] != nil {

			if swag.IsZero(m.Providers[i]) { // not required
				return nil
			}

			if err := m.Providers[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("providers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("providers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *Workflow) contextValidateTriggers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Triggers); i++ {

		if m.Triggers[i] != nil {

			if swag.IsZero(m.Triggers[i]) { // not required
				return nil
			}

			if err := m.Triggers[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("triggers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("triggers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Workflow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Workflow) UnmarshalBinary(b []byte) error {
	var res Workflow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
