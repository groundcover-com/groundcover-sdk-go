// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MonitorListItem monitor list item
//
// swagger:model MonitorListItem
type MonitorListItem struct {

	// Title of the monitor.
	Title string `json:"title,omitempty" yaml:"title,omitempty"`

	// Type of the monitor.
	Type string `json:"type,omitempty" yaml:"type,omitempty"`

	// Unique identifier for the monitor.
	// Format: uuid
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty" yaml:"uuid,omitempty"`
}

// Validate validates this monitor list item
func (m *MonitorListItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitorListItem) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this monitor list item based on context it is used
func (m *MonitorListItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MonitorListItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitorListItem) UnmarshalBinary(b []byte) error {
	var res MonitorListItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
