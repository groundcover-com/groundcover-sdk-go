// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdatePolicyRequest update policy request
//
// swagger:model UpdatePolicyRequest
type UpdatePolicyRequest struct {

	// Optional new claim role for the policy.
	ClaimRole string `json:"claimRole,omitempty"`

	// The current revision number of the policy being updated (for optimistic locking).
	CurrentRevision int32 `json:"currentRevision,omitempty"`

	// Optional new description for the policy.
	Description string `json:"description,omitempty"`

	// New name for the policy.
	// Required: true
	Name *string `json:"name"`

	// data scope
	DataScope *DataScope `json:"dataScope,omitempty"`

	// role
	Role RoleMap `json:"role,omitempty"`
}

// Validate validates this update policy request
func (m *UpdatePolicyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePolicyRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePolicyRequest) validateDataScope(formats strfmt.Registry) error {
	if swag.IsZero(m.DataScope) { // not required
		return nil
	}

	if m.DataScope != nil {
		if err := m.DataScope.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("dataScope")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("dataScope")
			}

			return err
		}
	}

	return nil
}

func (m *UpdatePolicyRequest) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("role")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("role")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this update policy request based on the context it is used
func (m *UpdatePolicyRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePolicyRequest) contextValidateDataScope(ctx context.Context, formats strfmt.Registry) error {

	if m.DataScope != nil {

		if swag.IsZero(m.DataScope) { // not required
			return nil
		}

		if err := m.DataScope.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("dataScope")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("dataScope")
			}

			return err
		}
	}

	return nil
}

func (m *UpdatePolicyRequest) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if err := m.Role.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("role")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("role")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdatePolicyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdatePolicyRequest) UnmarshalBinary(b []byte) error {
	var res UpdatePolicyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
