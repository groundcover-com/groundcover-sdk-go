name: Release SDK

on:
  workflow_dispatch:
    inputs:
      commit_hash:
        description: 'Commit hash to release (default: latest)'
        required: false
        default: 'latest'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.24'

      - name: Download and Extract SDK
        env:
          COMMIT_HASH: ${{ github.event.inputs.commit_hash }}
        run: |
          FILE_URL="https://groundcover-openapi-sdk-bucket.s3.us-east-1.amazonaws.com/groundcover-sdk-${COMMIT_HASH}.tar.gz"
          echo "Downloading from ${FILE_URL}"
          curl -L -o groundcover-sdk.tar.gz "${FILE_URL}"
          tar -xzf groundcover-sdk.tar.gz
          rm groundcover-sdk.tar.gz

      - name: Commit Changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update SDK to version from commit ${{ github.event.inputs.commit_hash }}"
            git push
          fi

      - name: Bump version and create tag
        id: version_bump
        run: |
          # Create VERSION file if it doesn't exist
          if [ ! -f VERSION ]; then
            echo "v1.0.0" > VERSION
          fi
          CURRENT_VERSION=$(cat VERSION)
          # Remove 'v' prefix if it exists for parsing
          CURRENT_VERSION_NUM=${CURRENT_VERSION#v}

          # Simple SemVer bump: increment minor version
          # Assumes format like vX.Y.Z or X.Y.Z
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION_NUM"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="v${MAJOR}.${NEW_MINOR}.${PATCH}"

          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"
          echo "$NEW_VERSION" > VERSION
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          git add VERSION
          git commit -m "Bump version to ${NEW_VERSION}"
          git push
          git tag "${NEW_VERSION}"
          git push origin "${NEW_VERSION}"

      - name: Create GitHub Release (Preview)
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_bump.outputs.new_version }}
          release_name: "Release ${{ steps.version_bump.outputs.new_version }}"
          body: |
            Automated release for version ${{ steps.version_bump.outputs.new_version }}.
            Released from commit: ${{ github.event.inputs.commit_hash }}
          draft: false