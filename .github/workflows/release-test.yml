name: Release SDK
permissions:
  contents: write
  packages: write
concurrency:
  group: release-${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
    branches:
      - avital/core-4571-use-autogenerated-client-in-sdk
    paths:
      - '.github/workflows/release-test.yml'

  workflow_dispatch:
    inputs:
      commit_hash:
        description: 'Commit hash to release (default: latest)'
        required: false
        default: 'latest'
      isPatchVersion:
        description: 'Bump patch version instead of minor'
        required: false
        type: boolean
        default: false
      isMajorVersion:
        description: 'Bump major version instead of minor'
        required: false
        type: boolean
        default: false

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.24'

      - name: Download and Extract SDK
        run: |
          # Set default value for COMMIT_HASH if not provided via inputs
          COMMIT_HASH="${{ github.event.inputs.commit_hash }}"
          if [ -z "$COMMIT_HASH" ] || [ "$COMMIT_HASH" = "latest" ]; then
            COMMIT_HASH="latest"
          fi
          echo "Using commit hash: $COMMIT_HASH"

          # Guardrail for input combinations
          if [ "${{ github.event.inputs.isMajorVersion }}" = "true" ] && [ "${{ github.event.inputs.isPatchVersion }}" = "true" ]; then
            echo "Error: Cannot set both isMajorVersion and isPatchVersion to true. Please choose only one type of bump or neither (for minor bump)."
            exit 1
          fi

          # Clean up the SDK to only include the necessary files
          rm -rf pkg/client
          rm -rf pkg/models

          # Download the SDK
          FILE_URL="https://groundcover-openapi-sdk-bucket.s3.us-east-1.amazonaws.com/groundcover-sdk-${COMMIT_HASH}.tar.gz"
          echo "Downloading from ${FILE_URL}"
          curl -L -o groundcover-sdk.tar.gz "${FILE_URL}"
          tar -xzf groundcover-sdk.tar.gz
          rm groundcover-sdk.tar.gz

      - name: Prepare and Bump Version File
        id: version_logic
        run: |
          if [ ! -f VERSION ]; then
            echo "VERSION file not found. Creating with v1.0.0."
            NEW_VERSION="v1.0.0"
            PREVIOUS_VERSION_INFO="N/A (file created with $NEW_VERSION)"
            echo "$NEW_VERSION" > VERSION
            echo "Set initial version to: $NEW_VERSION"
          else
            OLD_VERSION_FROM_FILE=$(cat VERSION)
            PREVIOUS_VERSION_INFO="$OLD_VERSION_FROM_FILE"
            echo "Current version from file: $OLD_VERSION_FROM_FILE"

            VERSION_NUM_NO_V=${OLD_VERSION_FROM_FILE#v}
            IFS='.' read -r -a VERSION_PARTS <<< "$VERSION_NUM_NO_V"
            MAJOR=${VERSION_PARTS[0]:-0}
            MINOR=${VERSION_PARTS[1]:-0}
            PATCH=${VERSION_PARTS[2]:-0}

            if [ "${{ github.event.inputs.isMajorVersion }}" = "true" ]; then
              echo "Bumping major version..."
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif [ "${{ github.event.inputs.isPatchVersion }}" = "true" ]; then
              echo "Bumping patch version..."
              PATCH=$((PATCH + 1))
            else
              echo "Bumping minor version..."
              MINOR=$((MINOR + 1))
              PATCH=0
            fi
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            echo "$NEW_VERSION" > VERSION
            echo "Bumped version to: $NEW_VERSION"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$PREVIOUS_VERSION_INFO" >> $GITHUB_OUTPUT

      - name: Commit & Push SDK and Version Changes
        id: commit_changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add pkg/client pkg/models VERSION
          
          if git diff --staged --quiet; then
            echo "No changes to SDK files or VERSION file. Skipping commit, tag, and release."
            echo "committed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected. Committing and pushing..."
            COMMIT_MSG="Update SDK to version ${{ steps.version_logic.outputs.new_version }} (SDK source: ${{ github.event.inputs.commit_hash }})"
            git commit -m "$COMMIT_MSG"
            git push
            echo "committed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create and Push Tag
        if: steps.commit_changes.outputs.committed == 'true'
        run: |
          NEW_VERSION_TAG="${{ steps.version_logic.outputs.new_version }}-test"
          echo "Creating and pushing tag: $NEW_VERSION_TAG"
          git tag "$NEW_VERSION_TAG"
          git push origin "$NEW_VERSION_TAG"

      - name: Create GitHub Release
        if: steps.commit_changes.outputs.committed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_logic.outputs.new_version }}
          release_name: "Release ${{ steps.version_logic.outputs.new_version }}"
          body: |
            Automated release for version ${{ steps.version_logic.outputs.new_version }}.
            SDK source commit: ${{ github.event.inputs.commit_hash }}
            Previous version: ${{ steps.version_logic.outputs.current_version }}
          draft: true
